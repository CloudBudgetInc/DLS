/****************
    - Added by HL on Apr 09 2020
    - Work Item : W-005036 - Online timekeeping for UAE Instructors
    - To send an email notification to the UAE Instructors who have not submitted (Not entered time) their timesheet on daily basis will be generated by Salesforce and send on the second day from the missed entry @ 10:00 AM, 12:00 PM and 02:00 PM GST 
    - Email Template : Dynamic HTML template
    - This scheduler runs on Gulf Standard Time
    - EST is 8 hours behind of GST, So this scheduler runs @ 02:00 AM, 04:00 AM and 06:00 AM EST
    - *********This scheduler will runs from Sunday to Thursday (Friday and Saturday holidays, so will not run)*******
    - Modified By HL on Feb 15, 2022 Work Item: W-007361 - Change Timekeeping Email Reminders for UAE Instructors
    - This scheduler will runs from Monday to Friday ("Sunday to Thursday" modified into "Monday to Friday")
    ******************/
    
public class DailyTimeEntryEmailToUAEInstructor implements Schedulable{

    public void execute(SchedulableContext sc) {
    
        DateTime todayVal = DateTime.newInstance(Date.today(), Time.newInstance(0, 0, 0, 0));
        List<Contact> contacts = new List<Contact>();
        
        if(todayVal.format('EEEE') != 'Saturday' && todayVal.format('EEEE') != 'Sunday' && !Test.isRunningTest()){
            
            contacts = [SELECT Id, Name 
                            FROM Contact 
                            WHERE RecordType.DeveloperName = 'Candidate' AND Active_DLS_Online_User__c = TRUE AND 
                                Email != null AND Id IN (SELECT Candidate_Name__c FROM Contact_Assignments__c WHERE RecordType.DeveloperName = 'Instructor' AND Status__c = 'Active' AND Project__r.RecordType.DeveloperName = 'EFL_Projects')];
        }else if(Test.isRunningTest()){
        
            contacts = [SELECT Id, Name 
                            FROM Contact 
                            WHERE RecordType.DeveloperName = 'Candidate' AND Active_DLS_Online_User__c = TRUE AND 
                                Email != null AND Id IN (SELECT Candidate_Name__c FROM Contact_Assignments__c WHERE RecordType.DeveloperName = 'Instructor' AND Status__c = 'Active' AND Project__r.RecordType.DeveloperName = 'EFL_Projects') LIMIT 1];
        }  
        
        if(contacts != NULL && contacts.size() > 0){
        
            System.debug(':::::contacts:::::'+contacts);
            System.debug(':::::contacts:::::'+contacts.size());
            
            Date previousDate;
        
            if(todayVal.format('EEEE') == 'Monday'){    // Sunday modified into Monday : Modified By HL on Feb 15, 2022
                previousDate = system.today().addDays(-3);
            }else{
                previousDate = system.today().addDays(-1);
            }
            
            Map<String,List<AcctSeed__Time_Card_Day__c>> insIdProjIdAndTCDRecs =  new Map<String,List<AcctSeed__Time_Card_Day__c>>();
            Map<Id,String> conIdSupervisorEmailMap = new Map<Id,String>();
            
            Set<Id> insIds = new Set<Id>();
            Set<String> statusSet = new Set<String>{'Rejected','Unposted','Recalled','Reverted'};
            Map<Id,Boolean> conIdAndIsHaveTCDRec = new Map<Id,Boolean>();
            
            Map<String, Id> insIdProjIdAndProjId = new Map<String, Id>();
            
            for(Contact_Assignments__c conAss : [SELECT Id, Candidate_Name__c, Project__c
                                                    FROM Contact_Assignments__c 
                                                    WHERE RecordType.DeveloperName = 'Instructor' AND Status__c = 'Active' 
                                                        AND Candidate_Name__c IN : contacts AND Project__r.RecordType.DeveloperName = 'EFL_Projects']) {
                
                String insIdAndProjId = conAss.Candidate_Name__c+'-'+conAss.Project__c;
                if(!insIdProjIdAndProjId.containsKey(insIdAndProjId)){
                    insIdProjIdAndProjId.put(insIdAndProjId, conAss.Project__c);
                }
            }
            System.debug(':::::insIdProjIdAndProjId:::::'+insIdProjIdAndProjId);
            
            for(AcctSeed__Time_Card_Day__c dayRec : [SELECT Id, Name, AcctSeed__Time_Card_Line__c, Status__c,
                                                            AcctSeed__Time_Card_Line__r.AcctSeed__Project__c, 
                                                            AcctSeed__Time_Card_Line__r.AcctSeed__Time_Card__r.Intructor__c,
                                                            AcctSeed__Time_Card_Line__r.AcctSeed__Time_Card__r.Intructor__r.Supervisor_Name__r.Email
                                                        FROM AcctSeed__Time_Card_Day__c 
                                                        WHERE AcctSeed__Date__c = :previousDate AND 
                                                            AcctSeed__Time_Card_Line__r.AcctSeed__Time_Card__r.Intructor__c IN :contacts AND 
                                                            AcctSeed__Time_Card_Line__r.AcctSeed__Project__r.RecordType.DeveloperName = 'EFL_Projects']) {
                
                String insIdProjId = dayRec.AcctSeed__Time_Card_Line__r.AcctSeed__Time_Card__r.Intructor__c+'-'+dayRec.AcctSeed__Time_Card_Line__r.AcctSeed__Project__c;
                
                if(!insIdProjIdAndTCDRecs.containsKey(insIdProjId)){
                    insIdProjIdAndTCDRecs.put(insIdProjId, new List<AcctSeed__Time_Card_Day__c>());
                }
                insIdProjIdAndTCDRecs.get(insIdProjId).add(dayRec);
                
                if(!conIdSupervisorEmailMap.containsKey(dayRec.AcctSeed__Time_Card_Line__r.AcctSeed__Time_Card__r.Intructor__c)){
                    conIdSupervisorEmailMap.put(dayRec.AcctSeed__Time_Card_Line__r.AcctSeed__Time_Card__r.Intructor__c,dayRec.AcctSeed__Time_Card_Line__r.AcctSeed__Time_Card__r.Intructor__r.Supervisor_Name__r.Email);
                }                          
            }
            System.debug(':::::insIdProjIdAndTCDRecs:::::'+insIdProjIdAndTCDRecs);
            System.debug(':::::conIdSupervisorEmailMap:::::'+conIdSupervisorEmailMap);
            
            for(String s : insIdProjIdAndProjId.keySet()){
                
                if(insIdProjIdAndTCDRecs.containsKey(s) && insIdProjIdAndTCDRecs.get(s) != NULL && insIdProjIdAndTCDRecs.get(s).size() > 0){
                
                    for(AcctSeed__Time_Card_Day__c dayRec : insIdProjIdAndTCDRecs.get(s)) {
                        
                        insIds.add(dayRec.AcctSeed__Time_Card_Line__r.AcctSeed__Time_Card__r.Intructor__c);
                        if(!statusSet.contains(dayRec.Status__c) && !conIdAndIsHaveTCDRec.containsKey(dayRec.AcctSeed__Time_Card_Line__r.AcctSeed__Time_Card__r.Intructor__c)){
                            conIdAndIsHaveTCDRec.put(dayRec.AcctSeed__Time_Card_Line__r.AcctSeed__Time_Card__r.Intructor__c,true);
                        }
                    }
                }else {
                    Id insId = s.split('-')[0];
                    insIds.add(insId);
                }
            }
            System.debug(':::::insIds:::::'+insIds);
            System.debug(':::::conIdAndIsHaveTCDRec:::::'+conIdAndIsHaveTCDRec);
            
            if(insIds.size() > 0 && conIdAndIsHaveTCDRec.size() > 0) {
                insIds.removeAll(conIdAndIsHaveTCDRec.keySet());
            }
            
            System.debug(':::::insIds:::FILTERED::'+insIds);
            
            if(insIds != NULL && insIds.size() > 0){
            
                List<Messaging.SingleEmailMessage> sendEmailToInstructors = new List<Messaging.SingleEmailMessage>();
                
                try{
                
                    Map<Id, Contact> conIdRec = new Map<Id, Contact>([SELECT Id, Name, Email, IsEmailBounced FROM Contact WHERE Id IN :insIds AND Email != NULL]);
                    System.debug('conIdRec========='+conIdRec+'conIdRec SIZE========'+conIdRec.size());
                    
                    System_Values__c sysVal = System_Values__c.getValues('Timesheet'); 
                    String orgWideEmailId = '';
                   
                    if(sysVal != null && sysVal.Value__c != null) {
                        orgWideEmailId = sysVal.Value__c;
                    }
                    
                    Date currentWeekStart = System.today().toStartofWeek().addDays(1);
                    Date currentWeekEnd = currentWeekStart.addDays(6);
                    
                    String cwStartStr = String.valueOf(currentWeekStart);
                    String cwEndStr = String.valueOf(currentWeekEnd);
                    
                    String stDate = cwStartStr.split('-')[1]+'/'+cwStartStr.split('-')[2]+'/'+cwStartStr.split('-')[0];
                    String endDate = cwEndStr.split('-')[1]+'/'+cwEndStr.split('-')[2]+'/'+cwEndStr.split('-')[0];
                    
                    String tcpWKRangeFormat = stDate+' to '+endDate;
                    System.debug(tcpWKRangeFormat);
                    
                    EventHandler eveHandle = new EventHandler();
                      
                    DateTime currentDt = System.now();
                    Integer currentTime = eveHandle.convertToMinutes(currentDt.format('h:mm a','America/New_York'));
                    Integer time1 = eveHandle.convertToMinutes('02:00 AM');
                    Integer time2 = eveHandle.convertToMinutes('04:00 AM');
                    Integer time3 = eveHandle.convertToMinutes('06:00 AM');
                    
                    Date yesterday = Date.today()-1;
                    String yesterdayStr = String.valueOf(yesterday).split('-')[1]+'/'+String.valueOf(yesterday).split('-')[2]+'/'+String.valueOf(yesterday).split('-')[0];
    
                    String mailContent = '<html>Hi Chris and April,<br/>The following contacts have bounced email ids, Please correct them: <br/>';
                    Boolean hasBouncedEmail = false;
                    
                    for(String s : insIdProjIdAndProjId.keySet()){
                    
                        Id insId = s.split('-')[0];
                        Id projId = s.split('-')[1];
                            
                        if(insIds.contains(insId)){
                                                    
                            if(conIdRec.containsKey(insId) && !conIdRec.get(insId).IsEmailBounced){
                            
                                Messaging.SingleEmailMessage mail = new Messaging.SingleEmailMessage();
                                
                                if(orgWideEmailId != null) {
                                    mail.setOrgWideEmailAddressId(orgWideEmailId);
                                }
                                mail.setTargetObjectId(insId);
                                String urLRedirectToInsPage = '<a href="'+System.Label.Instructor_Community_Site_Prefix+'/s/instructor-time-entry?week='+ tcpWKRangeFormat + '&projectId='+ projId +'" target="_blank"> Click Here </a>';
                                
                                String htmlBody = '';
                                htmlBody += 'Dear '+ conIdRec.get(insId).Name + ', <br/><br/>';
                                    
                                if(((currentTime >= time1 || currentTime >= time2) && currentTime < time3) || Test.isRunningTest()){
                                
                                    mail.subject = 'Your Daily Time Entry is Due Today!';  
                                    htmlBody += 'This is a reminder that your time entry for '+ yesterdayStr + ' is due @ 12:00 pm ET today. ';
                                    
                                } 
                                if(currentTime >= time3 || Test.isRunningTest()){
                                
                                    mail.subject = 'Your Daily Time Entry is Overdue! - 2nd Reminder';
                                    htmlBody += 'This is a reminder that your time entry for '+ yesterdayStr + ' was due @ 12:00 pm ET today. ';
                                }     
                                htmlBody += 'Please, go to the Instructor Time Entry page to complete your timesheet. ';
                                htmlBody += 'Please, make sure to save the entered information. ';
                                htmlBody += 'Completing your time entry on-time will help us to make sure we pay you on-time and correctly.<br/><br/>';
                                htmlBody += 'If you have any questions regarding your timesheet in general please contact your supervisor.<br/><br/>';
                                htmlBody += 'Access to your Web timesheet entry here: '+ urLRedirectToInsPage + '<br/><br/>';
                                htmlBody += 'Regards,<br/>Time Reporting System<br/>This e-mail was auto generated. Please do not respond.';                      
                                
                                mail.setHtmlBody(htmlBody);
                                mail.setSaveAsActivity(TRUE);
                                
                                /*
                                if(conIdSupervisorEmailMap.containsKey(insId)) {
                                    String ccadd = conIdSupervisorEmailMap.get(insId);
                                    mail.setCcAddresses(new List<String>{ccadd});
                                }
                                */
                                sendEmailToInstructors.add(mail);
                            }else{
                            
                                mailContent += '<a href="'+System.Label.Org_Prefix_Start_URL+'/'+conIdRec.get(insId).Id+'" target="_blank">'+conIdRec.get(insId).Name+'</a><br/>';
                                hasBouncedEmail = true;
                            }    
                        }
                    }
                    mailContent += '<br/><p>This e-mail was auto generated. Please do not respond.</p>';
                    mailContent += '</html>';
                    
                    if(hasBouncedEmail || Test.isRunningTest()) {
                    
                        //Added custome setting to hold the exception recipients email ids
                        List<String> toAddressIds = new List<String>();
            
                        System_Values__c sysVal1 = System_Values__c.getValues('Contact Bounced Exception Email Ids'); 
                        if (sysVal1 != null && sysVal1.Value__c != null) {
                            for (String st : sysVal1.Value__c.split(',')) {
                                toAddressIds.add(st.trim());
                            }
                        }
                        
                        Messaging.SingleEmailMessage bouncedmail = new Messaging.SingleEmailMessage();
                        bouncedmail.setToAddresses(toAddressIds);
                        bouncedmail.setSubject('Bounced email contact information');
                        bouncedmail.sethtmlBody(mailContent);
                        sendEmailToInstructors.add(bouncedmail);
                    }
                    System.debug('::::::sendEmailToInstructors::::::::'+sendEmailToInstructors);
                    
                    if( sendEmailToInstructors != null && sendEmailToInstructors.size() > 0 ) {
                        Messaging.SendEmailResult[] results = Messaging.sendEmail(sendEmailToInstructors);
                    }
                }catch(Exception e) {
            
                    ErrorHandler errHandler = new ErrorHandler();
                    errHandler.sendExceptionEmail(e.getMessage(),system.Label.TimeCardDayEmail,'Error on Daily Time Entry Email To UAE Instructor');  
                } 
            }
        }
    }
}