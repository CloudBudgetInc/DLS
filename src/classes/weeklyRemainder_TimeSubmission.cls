global class weeklyRemainder_TimeSubmission implements Database.batchable<sObject>,Database.Stateful { 
    
    /*****************************************************************************
        - An e-mail notification to the employees who have not submitted their timesheet on weekly basis will be generated by Salesforce and send by 1:00 pm ET on Monday of each week
        - Batch called from weekly_TimeSubmission_schedule 
        - Email template used - Weekly_Remainder_Timesheet_Submission
    ******************************************************************************/
  
    /*public void timeLogConvertTo(){
        weeklyRemainder_TimeSubmission timeSubmit = new weeklyRemainder_TimeSubmission();
        database.executeBatch(timeSubmit,5);
    }*/
    global List<Messaging.SingleEmailMessage> EmailToInstructorList;
    global Map<Id,Id> contactIdCardIdMap = new Map<Id,Id>();
    global Map<Id,String> conIdSupervisorEmailMap = new Map<Id,String>();
    
    global Database.QueryLocator start(Database.BatchableContext info){
        
        Date currentWeekStart = system.today().toStartofWeek().addDays(1);
        Date currentWeekEnd = currentWeekStart.addDays(6);
        
        Date previousStart = currentWeekStart.addDays(-7);
        Date previousEnd = previousStart.addDays(6);
        
        String  timeCardQry = 'SELECT Id,Name,of_Pending_Time_Logs__c,Intructor__c,Intructor__r.Supervisor_Name__c,Supervisor_Name__c,Intructor__r.Supervisor_Name__r.Email'+
                                ' FROM AcctSeed__Time_Card__c'+
                                ' WHERE of_Pending_Time_Logs__c != 0 AND Intructor__r.RecordType.DeveloperName = \'DLS_Employee\' '+
                                'AND Intructor__r.Active_DLS_Employee__c = true AND Intructor__r.EE_Pay_Status__c != \'Contractor\' AND Intructor__r.Email != null '+
                                'AND AcctSeed__Time_Card_Period__r.AcctSeed__Start_Date__c = '+String.valueOf(previousStart).split(' ')[0]+' AND AcctSeed__Time_Card_Period__r.AcctSeed__End_Date__c = '+String.valueOf(previousEnd).split(' ')[0]+'';
        System.debug('::::::::timeCardQry::::::::::'+timeCardQry);
        return Database.getQueryLocator(timeCardQry);
    }
        
    global void execute(Database.BatchableContext info, List<AcctSeed__Time_Card__c> cardList){
    
        system.debug('::::::::cardList:::::'+cardList);
        
        for(AcctSeed__Time_Card__c timeCard : cardList){
            if(timeCard.Intructor__c != null && !contactIdCardIdMap.containsKey(timeCard.Intructor__c)) {
                contactIdCardIdMap.put(timeCard.Intructor__c,timeCard.Id);
                
                if(!conIdSupervisorEmailMap.containsKey(timeCard.Intructor__c)){
                    conIdSupervisorEmailMap.put(timeCard.Intructor__c,timeCard.Intructor__r.Supervisor_Name__r.Email);
                }   
            }
        }
        
        system.debug(':::::::::contactIdCardIdMap:::::;'+contactIdCardIdMap);
        
    }
    global void finish(Database.BatchableContext info){ 
        
        EmailToInstructorList = new List<Messaging.SingleEmailMessage>();
        
        try {
        
            EmailTemplate templateId = [Select id from EmailTemplate WHERE DeveloperName = 'Weekly_Remainder_Timesheet_Submission'];
            
            system.debug('::::::::::templateId::::::::;;'+templateId);        
            
            //Qry system value custom setting to get org wide email address for timesheets
            System_Values__c sysVal = System_Values__c.getValues('Timesheet'); 
            String orgWideEmailId = '';
           
            if(sysVal != null && sysVal.Value__c != null) {
                orgWideEmailId = sysVal.Value__c;
            }
            
            system.debug(':::::::orgWideEmailId:::::'+orgWideEmailId);
            
            if(contactIdCardIdMap != null && contactIdCardIdMap.size() > 0 && templateId != null) {
                
                    for(Id contactId :contactIdCardIdMap.keySet()){
                    
                        Messaging.SingleEmailMessage mail = new Messaging.SingleEmailMessage();
                        if(orgWideEmailId != null) {
                            mail.setOrgWideEmailAddressId(orgWideEmailId);
                        }
                        mail.setTargetObjectId(contactId);
                        if(conIdSupervisorEmailMap.containsKey(contactId)) {
                            String ccadd = conIdSupervisorEmailMap.get(contactId);
                            mail.setCcAddresses(new List<String>{ccadd});
                        }
                        mail.setWhatId(contactIdCardIdMap.get(contactId));
                        mail.setTemplateID(templateId.Id);
                        mail.setSaveAsActivity(true);
                        EmailToInstructorList.add(mail);
                        
                        //System.Debug('Email::: ' + mail);
                    }
                }
            
            System.debug('EmailToInstructorList::::'+EmailToInstructorList);
        
            if( EmailToInstructorList != null && EmailToInstructorList.size() > 0 ) {
                Messaging.SendEmailResult[] results = Messaging.sendEmail(EmailToInstructorList);
            }   
        }catch(Exception e) {
        
            List<Messaging.SingleEmailMessage> ErrorMailMsg = new List<Messaging.SingleEmailMessage>();
            Messaging.SingleEmailMessage mail = new Messaging.SingleEmailMessage(); 
            mail.setToAddresses(new String[] {system.Label.TimeCardDayEmail});
            mail.setSubject('Error on Weekly Remainder time submission send'); 
            mail.setPlainTextBody(e.getMessage());
            ErrorMailMsg.add(mail);
            try{
                if( ErrorMailMsg != null && ErrorMailMsg.size() > 0 ){
                    Messaging.sendEmail(ErrorMailMsg); 
                }
            } catch (Exception ex){
                system.debug('Ex::::'+ex);
            }       
        }
    }   
}