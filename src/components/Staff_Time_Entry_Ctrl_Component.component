<apex:component controller="DLS_Staff_Time_Entry_Ctrl">
    <!-- This component created by Sukaya on May 5 2017 for Internal & Staff community time entry usage --->
    <script>
    if('{!$Site.Name}' === '') {
        var underscore = angular.module('underscore', []);
        underscore.factory('_', ['$window', function($window) {
            return $window._;
        }]);
        console.log(':::::::site::::::::::::::','{!$Site.Name}');
        var app = angular.module('myApp', ['angular.filter','ngRoute','720kb.datepicker','underscore']);
    }
    app.controller('DLS_Staff_Controller', function($scope,$timeout,$routeParams,$location,$route,_,$q) {
        
        document.getElementById("spinner").style.display = 'block';
        
        $scope.DaysList = [];
        $scope.timeCardDayList = [];
        $scope.ContactList = [];
        
        $scope.commentsList = [];
        var commentFormationList = [];
        
        $scope.modalStateForEmployeeChange = '';
        $scope.modalBackdropStateForEmployeeChange = '';
        
        $scope.modalStateForError = '';
        $scope.modalBackdropStateForError = '';
        $scope.errorMessageforAllSave = '';
        $scope.modelTitle = '';
        
        $scope.modalStateForDuplicate = '';
        $scope.modalBackdropStateForDuplicate = '';
        
        $scope.modalStateForSubmission  =  '';
        $scope.modalBackdropStateForSubmission = '';
        
        $scope.noRecordFound = true;
        
        $scope.HomeDepartmentName = '';
        $scope.SupervisorName = '';
        
        //For existing time card day hrs edit
        $scope.modalStateForDayEdit = '';
        $scope.modalBackdropStateForDayEdit = '';
        
        // For Bonus Leave Earned comment Capture
        $scope.modalStateForNewDay = '';
        $scope.modalBackdropStateForNewDay = '';
        
        $scope.HoursError = '';
        $scope.CommentsError = '';
        
        $scope.NotesSectionDisplay = true;
        
        $scope.AddBtnDisplay = true;
        $scope.LockPeriodMessage = '';
        
        // For Add Btn popup open
        $scope.modalStateForAddBtn = '';
        $scope.modalBackdropStateForAddBtn = '';
        
        // For charge code edit modal open
        $scope.modalStateForChargeCodeEdit = '';
        $scope.modalBackdropStateForChargeCodeEdit = '';
       
        // For Home Department Project location validation
        $scope.modalStateForLocationValidation = '';
        $scope.modalBackdropStateForLocationValidation  = '';
        
        $scope.timeEnteredOnTime = 0;
        $scope.timeEnteredLate = 0;
        $scope.timeSubmittedOnTime = 0;
        $scope.timeSubmittedLate = 0;
        
        // to avoid duplicate records display
        var UniqueKeySet = [];
        
        var taskNameArray = [];
        
        var sDate = '';
        var eDate = '';
        var sDate1 = '';
        var eDate1 = ''; 
        
        var previouslySelectedweek = '';
        var currentSelection = '';
        
        var curr = new Date();
        var date = curr.getDate();
        var month = curr.getMonth()+ 1;
        var year = curr.getFullYear();

        if(month < 10)
            month = '0'+ month;
        if(date < 10)
            date = '0' + date;
        
        var currentDay = curr.getDay();

        var first = new Date(curr.getTime() - (currentDay * 24 * 60 * 60 * 1000) + 24 * 60 * 60 * 1000);
        var last = new Date(curr.getTime() + ((7 - currentDay) * 24 * 60 * 60 * 1000));
       
        var stdate = first.getDate();
        var stmnth = first.getMonth()+ 1;
        var styr = first.getFullYear();

        var eddate = last.getDate();
        var edmnth = last.getMonth()+ 1;
        var edyr = last.getFullYear();

        if(stdate < 10) {
            stdate = '0'+stdate;
        }
        if(eddate < 10) {
            eddate = '0'+eddate;
        }
        if(stmnth < 10) {
            stmnth = '0'+stmnth;
        }
        if(edmnth < 10) {
            edmnth = '0'+edmnth;
        }
        var st = styr+'-'+stmnth+'-'+stdate;
        var ed = edyr+'-'+edmnth+'-'+eddate;

        console.log(st);
        console.log(ed);
        
        var WeekStart = moment(st);
        var WeekEnd = moment(st).add(6, 'days');
        
        $scope.dateLableArray = [];
        
        while(WeekStart.isBefore(WeekEnd) || WeekStart.isSame(WeekEnd)) {
           $scope.DaysList.push(WeekStart.format('YYYY-MM-DD'));
           $scope.dateLableArray.push(WeekStart.format('MM/DD/YY'));
           WeekStart.add(1, 'days').format('YYYY-MM-DD');
        }
        
        $scope.FromDate = new moment(st).format('MM-DD-YYYY');
        $scope.ToDate = new moment(st).add(6, 'days').format('MM-DD-YYYY');
        
        $scope.weekRangeFilter = [];
        $scope.summaryWeekrangeFilter = [];
        
        var btnCallingCount = 0;
        
        $scope.fromOkayOnConfirmation = false;
        
        var snapshotIDsSet = [];
        $scope.dayIdsForSaveCheck = [];
        
        $scope.MonthDaysList = [];
        var AllDataArray = [];
        var AllDataArray1 = [];
        
        //For confirmation window display deciding factor
        $scope.UpdationRecordList = [];
        
        $scope.LineIdsToUpdate = [];
        $scope.lineRecordsForUpdate = [];
        
        // get existing time card day sequence number
        $scope.existingSequenceNumber = {};
        
        // Get url values
        
        $scope.urlWeekrange = '';
        
        var isSitepage = false;
        if('{!$Site.Name}' != '') {
            isSitepage = true;
        }
        
        $scope.sitePage = isSitepage;
        
        if($location.absUrl().contains('WeekRange')) {
            var address = '';
            if($location.absUrl().contains('+'))
                address = $location.absUrl().split('+').join('%20');
            else
                address = $location.absUrl();
            
            var range = decodeURIComponent(address).split('WeekRange=')[1].split('&tour')[0];
            
            if(range.contains('&sfdcIFrame')){
                $scope.urlWeekrange = range.split('&sfdcIFrame')[0];
            }else {
                $scope.urlWeekrange = range;
            }
            
            console.log(':::::$scope.urlWeekrange::::::',$scope.urlWeekrange);
        }
        
        
        // These components add for tabbed view by Sukanya on JAN 12 2017
        
        $scope.openBox11 = function() {
            $('.slds-active').removeClass('slds-active');
            $('#li11').addClass('slds-active');
            $('.slds-show').removeClass('slds-show');
            $('#tab-scoped-11').addClass('slds-show');
            $('#tab-scoped-12').addClass('slds-hide');
            
            $scope.saveBtnDisplay = false;
            $scope.recallBtnDisplay = false;
            $scope.submitBtnDisplay = false;
            
            if($scope.sitePage)
                $scope.cancelBtnDisplay = true;
            console.log('::::::::enter:::openBox11::::');
        }
        
        $scope.openBox12 = function() {
            $('.slds-active').removeClass('slds-active');
            $('#li12').addClass('slds-active');
            $('.slds-show').removeClass('slds-show');
            $('#tab-scoped-11').addClass('slds-hide');
            $('#tab-scoped-12').addClass('slds-show');
            
            // This method for displaying buttons on Page
            allButtondisplay();
            btnCallingCount = 1;
        }
        
        $scope.openBox13 = function() {
            $('.slds-active').removeClass('slds-active');
            $('#li13').addClass('slds-active');
            $('.slds-show').removeClass('slds-show');
            $('#tab-scoped-11').addClass('slds-hide');
            $('#tab-scoped-12').addClass('slds-hide');
            $('#tab-scoped-13').addClass('slds-show');
        }
       
        $scope.tableViewDisplay = false;
        
        var currentWeekboolean = false;
        var booleanForbeforelastWeek = false;
        
       // End of date population
       
       // past 12 weeks,current week & future 4 weeks date range calculation 
       
       //Enter time tab Week range filter formation
       
       function enterTimeweekRangeformation() {
           // past days
           var days = 7 * 4 + 6;
           
           // Future days
           var futuredays = 7 * 4;
           
           var crntWeekEnd = moment($scope.ToDate, 'MM-DD-YYYY');
           
           var pastStartdate = moment(crntWeekEnd).subtract(days, 'days').format('YYYY-MM-DD');
           var futureEnddate = moment(crntWeekEnd).add(futuredays, 'days').format('YYYY-MM-DD');
           
           var week1 = moment(pastStartdate, 'YYYY-MM-DD');
           var week2 = moment(futureEnddate, 'YYYY-MM-DD');
           
           while(week1.isBefore(futureEnddate) || week1.isSame(futureEnddate)) {
               var stDate = angular.copy(week1);
               var endDate = stDate.add(6,'days').format('MM-DD-YYYY');
               $scope.weekRangeFilter.push(week1.format('MM-DD-YYYY')+' to '+endDate);
               week1.add(7, 'days').format('MM-DD-YYYY');
           }
            
            if($scope.urlWeekrange) {
                $scope.selectedWeekRange = $scope.urlWeekrange;
                
                $scope.dateLableArray = [];
                $scope.DaysList = [];
                
                var WeekStart = moment($scope.selectedWeekRange.split(' to ')[0],'MM-DD-YYYY');
                var WeekEnd = moment(WeekStart).add(6,'days');
                
                while(WeekStart.isBefore(WeekEnd) || WeekStart.isSame(WeekEnd)) {
                   $scope.DaysList.push(WeekStart.format('YYYY-MM-DD'));
                   $scope.dateLableArray.push(WeekStart.format('MM/DD/YY'));
                   WeekStart.add(1, 'days').format('YYYY-MM-DD');
                }
                
            }else {
                $scope.selectedWeekRange = new moment(st).format('MM-DD-YYYY') +' to '+new moment(st).add(6, 'days').format('MM-DD-YYYY');
            }
            
            previouslySelectedweek = $scope.selectedWeekRange;
            currentSelection = $scope.selectedWeekRange;
       }
       
       //Summary view week range filter formation
       
       function SummaryWeekRangeFilterFormation() {
       
            // These below code to populate date for today based infor
        
            $scope.MonthFromDate = new moment();
            
            var actulaMnthStartDate = new moment(moment().subtract(1,'months').endOf('month').add(1, 'days'));
            var actulaMnthEndDate = new moment().add(1, 'months').date(1).subtract(1, 'days');
            
            var monthFrom;
            var monthtTo;
            
            if(moment($scope.MonthFromDate).isAfter(new moment(actulaMnthStartDate).add(15,'days'))) {
               
               monthFrom = new moment(actulaMnthStartDate).add(15,'days');
               monthtTo = actulaMnthEndDate;
            }else {
               monthFrom = actulaMnthStartDate;
               monthtTo = new moment(actulaMnthStartDate).add(14,'days');
            }
            
            $scope.MonthFromDate = new moment(monthFrom).format('MM-DD-YYYY');
            $scope.MonthToDate = new moment(monthtTo).format('MM-DD-YYYY');
            
            var monthStart = moment($scope.MonthFromDate);
            var monthEnd = moment($scope.MonthToDate);
            
            while(monthStart.isBefore(monthEnd) || monthStart.isSame(monthEnd)) {
               $scope.MonthDaysList.push(monthStart.format('YYYY-MM-DD'));
               monthStart.add(1, 'days').format('YYYY-MM-DD');
            }
          
           
           var pastMonthSt = moment().subtract(4,'months').endOf('month').add(1, 'days').format('YYYY-MM-DD');
           var futureMontend = moment().add(2, 'months').date(1).subtract(1, 'days').format('YYYY-MM-DD');
               
           var monthRangeFilter = [];
           
           var week1 = moment(pastMonthSt, 'YYYY-MM-DD');
           var week2 = moment(futureMontend, 'YYYY-MM-DD');
          
           while(week1.isBefore(week2) || week1.isSame(week2)) {
               var dt1 = angular.copy(week1);
               var dt2 = moment(dt1).add(14,'days');
               
               var dt3 = moment(dt2).add(1,'days');
               var dt4 = moment(dt3).add(1, 'months').date(1).subtract(1, 'days');
               
              $scope.summaryWeekrangeFilter.push(dt1.format('MM-DD-YYYY')+' to '+dt2.format('MM-DD-YYYY'));
              $scope.summaryWeekrangeFilter.push(dt3.format('MM-DD-YYYY')+' to '+dt4.format('MM-DD-YYYY'));
              
              week1.add(1,'month').format('MM-DD-YYYY');
           }
           
           $scope.summaryWeekRange = moment(monthFrom).format('MM-DD-YYYY')+' to '+moment(monthtTo).format('MM-DD-YYYY');
            
        }
       
        enterTimeweekRangeformation();
        SummaryWeekRangeFilterFormation();
       
        $scope.ToDateCalculation = function() {
        
            var dt1 = moment($scope.selectedWeekRange.split(' to ')[0],'MM-DD-YYYY').format('YYYY-MM-DD');
            var dt2 = moment(dt1,'MM-DD-YYYY').add(6,'days').format('YYYY-MM-DD');
            
            if(moment(dt1).isAfter($scope.TimeLogLockDate)) {
                currentSelection = $scope.selectedWeekRange;
                $scope.selectedWeekRange = previouslySelectedweek;
                
                $scope.FromDate = moment($scope.selectedWeekRange.split(' to ')[0]).format('YYYY-MM-DD');
                $scope.ToDate = moment($scope.FromDate).add(6,'days').format('YYYY-MM-DD');
                
                $scope.NotesSectionDisplay = true;
                
                $scope.modalStateForEmployeeChange = 'slds-fade-in-open';
                $scope.modalBackdropStateForEmployeeChange = 'slds-modal-backdrop--open';
            }else {
                //console.log(':::::::enter lock::date::::::::::::');
                
                currentSelection = $scope.selectedWeekRange;
                $scope.selectedWeekRange = previouslySelectedweek;
                
                $scope.FromDate = moment($scope.selectedWeekRange.split(' to ')[0]).format('YYYY-MM-DD');
                $scope.ToDate = moment($scope.FromDate).add(6,'days').format('YYYY-MM-DD');
                
                $scope.NotesSectionDisplay = true;
                
                $scope.AddBtnDisplay = false;
                
                $scope.LockPeriodMessage = 'You cannot create and edit Time Card Day record after Time Card Day locking period ('+$scope.TimeLogLockDate+').';
                
                $scope.modalStateForEmployeeChange = 'slds-fade-in-open';
                $scope.modalBackdropStateForEmployeeChange = 'slds-modal-backdrop--open';
            }
        }
        
        $scope.OkayFunction = function() {
            $scope.SaveCallingFunction('FromSave');
            
            $scope.modalStateForEmployeeChange = '';
            $scope.modalBackdropStateForEmployeeChange = '';
            
            $scope.fromOkayOnConfirmation = true;
            
            $timeout(function(){
                
                $scope.timeCardDayList = [];
                UniqueKeySet = [];
                $scope.commentsList = [];
                
                CalculateWeekRangeDate(currentSelection);
                
                $scope.selectedWeekRange = currentSelection;
                
                var dt1 = moment($scope.selectedWeekRange.split(' to ')[0],'MM-DD-YYYY').format('YYYY-MM-DD');
                var dt2 = moment(dt1).add(6,'days').format('YYYY-MM-DD');
                
                $scope.FromDate = dt1;
                $scope.ToDate = dt2;
                
                getContactRelatedInformation(dt1,dt2);
                
            },4000);
        }
        
        $scope.cancelFunction = function() {
            $scope.modalStateForEmployeeChange = '';
            $scope.modalBackdropStateForEmployeeChange = '';
            $scope.FromDate = sDate;
            $scope.ToDate = eDate;  
            
            $scope.selectedWeekRange = previouslySelectedweek;
        }
        
        $scope.proceedwithoutsave = function() {
            
            $scope.timeCardDayList = [];
            UniqueKeySet = [];
            $scope.commentsList = [];
            
            $scope.modalStateForEmployeeChange = '';
            $scope.modalBackdropStateForEmployeeChange = '';
            
            $timeout(function(){
                CalculateWeekRangeDate(currentSelection);
                $scope.selectedWeekRange = currentSelection;
                
                var dt1 = moment($scope.selectedWeekRange.split(' to ')[0],'MM-DD-YYYY').format('YYYY-MM-DD');
                var dt2 = moment(dt1).add(6,'days').format('YYYY-MM-DD');
                
                $scope.FromDate = dt1;
                $scope.ToDate = dt2;
                
                getContactRelatedInformation(dt1,dt2);
            },1000);
            
        }
        
        // To get the contact related projects & project tasks
        
        function getContactRelatedInformation(date1,date2) {
            //console.log(':::::getContactRelatedInformation:::::::::',date1,date2);
            document.getElementById("spinner").style.display = 'block';
                Visualforce.remoting.Manager.invokeAction(
                    '{!$RemoteAction.DLS_Staff_Time_Entry_Ctrl.getEmployeeRelatedInfo}',
                    date1,date2,
                    function(records, ev) {
                        if(ev.status) {
                            console.log(':::::result::getemployee:::',records);
                            $timeout(function() {
                                var Obj = {};
                                var indexForRemove = 0;
                                
                                taskNameArray = [];
                                
                                var CheckHomeDeptExit = false;
                                $scope.projectTaskValidation = {};
                                $scope.commentsList = [];
                                snapshotIDsSet = [];
                                commentFormationList = [];
                                $scope.dayIdsForSaveCheck = [];
                                $scope.homeDeptLocationValidation = {};
                                
                                $scope.UnpostedRecordIds = [];
                                $scope.existingSequenceNumber = {};
                                
                                var firstRowIndex = -1;
                                
                                var selectObj = {Id:'--select--',Name:'--select--'};
                                
                                $scope.ContactList = records.assignments;
                                $scope.selectedEmployee = records.ContactId;
                                $scope.EmployeeName = records.Name;
                                $scope.HomeDeprtProId = records.HomeDeptProId;
                                $scope.HomeDepartmentName = records.HomeDepartProName;
                                $scope.SupervisorName = records.supervisorName;
                                $scope.SupervisorId = records.supervisorId;
                                $scope.ContactRT = records.ContactRecordType;
                                $scope.PaycomId = records.PaycomId;
                                $scope.timeEnteredOnTime = records.timeEnteredOnTime;
                                $scope.timeEnteredLate = records.timeEnteredLate;
                                $scope.timeSubmittedOnTime = records.timeSubmittedOnTime;
                                $scope.timeSubmittedLate = records.timeSubmittedLate;
                                
                                if($scope.EmployeeName)
                                    $scope.Employee_Paycom = $scope.EmployeeName;
                                
                                if($scope.PaycomId)
                                    $scope.Employee_Paycom += ' - '+$scope.PaycomId;
                                
                                if(records.timeCardDayDetails) {
                                    $scope.timeCardDayList = records.timeCardDayDetails;
                                }else {
                                    $scope.timeCardDayList = [];
                                }
                                
                                $scope.UserName = records.UserName;
                                
                                $scope.UserTimezoneValue = records.UserTimezoneValue;
                                
                                $scope.TimeLogLockDate = millisecondToString(records.timeLogLockDate);
                                
                                $scope.accountSnapshotDetails = records.timeSnapshotDetails;
                                
                                $scope.PayRollItems = records.payRollItemList;
                                
                                $scope.EEPayStatus = records.EEPayStatus;
                                
                                $scope.PreviousWeekMap = records.previousWeekprojectTasks;
                                
                                $scope.contactAssignments = records.contactAssignmentList;
                                
                                $scope.task_PayrollItemMap = records.taskName_PayrollItemMap;
                                
                                console.log('::::::::$scope.task_PayrollItemMap:::::',$scope.task_PayrollItemMap);
                                
                                //  display validation message - if logged contact does not have cost rate in Contact Assignment level
                                
                                var conAssign = _.filter($scope.contactAssignments, function(data){ 
                                    if(data.Project__c == $scope.HomeDeprtProId && data.Candidate_Name__c == $scope.selectedEmployee)
                                       return data;
                                });
                                
                                if(conAssign.length > 0 && !conAssign[0].Rate_Card_Rate__c) {                                    
                                    costRateValidationMsg();
                                }
                                
                                // for Holiday List
                                $scope.HolidayDateSet = records.holidayList;
                                $scope.daysInholiday = [];
                                
                                for(var i = 0;i < $scope.HolidayDateSet.length;i++) {
                                    $scope.daysInholiday.push(millisecondToString($scope.HolidayDateSet[i]));
                                }
                                
                                //console.log('::::::::$scope.daysInholiday::::::',$scope.daysInholiday);
                                
                                // For related document details
                                $scope.documentList = records.timekeepingRelatedDocuments;
                                
                                records.projects.unshift(selectObj);
                                
                                // Added EEPayStatus Conditions for Bonus Leave Taken & Earned Project Task display
                                
                                var ProjectTasksAfterFilter = _.filter(records.projectTasks, function(data){ 
                                    
                                    if($scope.EEPayStatus == 'Salary') {
                                        return data; 
                                    } else if(data.Name.indexOf('Bonus Leave Taken') == -1 && data.Name.indexOf('Bonus Leave Earned') == -1) {
                                        return data;
                                    }
                                });
                               
                                //$scope.WholeTaskList = records.projectTasks;
                                $scope.WholeTaskList = ProjectTasksAfterFilter;
                                $scope.WholeProjectList = records.projects;
                                
                                // Added by Sukanya on November 22 2016
                                
                                if($scope.timeCardDayList) {
                                
                                    for(var i = 0; i < $scope.timeCardDayList.length;i++) {
                                    
                                        $scope.timeCardDayList[i].projects = records.projects;
                                        
                                        if($scope.timeCardDayList[i].SelectedProject == $scope.HomeDeprtProId){
                                            $scope.timeCardDayList[i].isHomeDepartment = true; 
                                            CheckHomeDeptExit = true;
                                        }else {
                                            $scope.timeCardDayList[i].isHomeDepartment = false; 
                                        }
                                        
                                        // Added EEPayStatus Conditions for Bonus Leave Taken & Earned Project Task display
                                        
                                        var filterData = _.filter(records.projectTasks, function(data){ 
                                            if(data.AcctSeed__Project__c == $scope.timeCardDayList[i].SelectedProject && $scope.EEPayStatus == 'Salary') {
                                                return data; 
                                            } else if(data.AcctSeed__Project__c == $scope.timeCardDayList[i].SelectedProject && (angular.isUndefined($scope.EEPayStatus) || $scope.EEPayStatus != 'Salary') 
                                                    && data.Name.indexOf('Bonus Leave Taken') != -1 && data.Name.indexOf('Bonus Leave Earned') != -1) {
                                                return data;
                                            }else if(data.AcctSeed__Project__c == $scope.timeCardDayList[i].SelectedProject){
                                                return data;
                                            }
                                        });
                                        
                                        var FutureProjectTask = _.filter(records.projectTasks, function(data){ 
                                            if(data.AcctSeed__Project__c == $scope.timeCardDayList[i].SelectedProject 
                                                && $scope.timeCardDayList[i].TaskType == 'Fringe' && $scope.EEPayStatus == 'Salary') {
                                                return data; 
                                            }else if(data.AcctSeed__Project__c == $scope.timeCardDayList[i].SelectedProject 
                                                && $scope.timeCardDayList[i].TaskType == 'Fringe' && (angular.isUndefined($scope.EEPayStatus) || $scope.EEPayStatus != 'Salary')
                                                && data.Name.indexOf('Bonus Leave Taken') != -1 && data.Name.indexOf('Bonus Leave Earned') != -1) {
                                                return data;
                                            }
                                        });
                                        
                                        
                                        if($scope.timeCardDayList[i].TaskType == 'Fringe' && moment($scope.FromDate).isAfter(new Date())) {
                                            $scope.timeCardDayList[i].projectTasks = FutureProjectTask; 
                                            
                                        } else if(!moment($scope.FromDate).isAfter(new Date())) {
                                            $scope.timeCardDayList[i].projectTasks = filterData; 
                                        }
                                       
                                        if($scope.timeCardDayList[i].SelectedProject == $scope.HomeDeprtProId && $scope.timeCardDayList[i].IsAdminProTask)
                                        {    
                                            firstRowIndex = i;
                                            Obj = $scope.timeCardDayList[i];
                                        }
                                        
                                        $scope.timeCardDayList[i].Day1 = millisecondToString($scope.timeCardDayList[i].Day1);
                                        $scope.timeCardDayList[i].Day2 = millisecondToString($scope.timeCardDayList[i].Day2);
                                        $scope.timeCardDayList[i].Day3 = millisecondToString($scope.timeCardDayList[i].Day3);
                                        $scope.timeCardDayList[i].Day4 = millisecondToString($scope.timeCardDayList[i].Day4);
                                        $scope.timeCardDayList[i].Day5 = millisecondToString($scope.timeCardDayList[i].Day5);
                                        $scope.timeCardDayList[i].Day6 = millisecondToString($scope.timeCardDayList[i].Day6);
                                        $scope.timeCardDayList[i].Day7 = millisecondToString($scope.timeCardDayList[i].Day7);
                                        
                                        $scope.timeCardDayList[i].isDisabled = false;
                                        $scope.timeCardDayList[i].Flag = true;
                                        $scope.timeCardDayList[i].HrsColourDisplay = '';
                                        
                                        $scope.totalHrsCalculation($scope.timeCardDayList[i]);
                                        
                                        if(taskNameArray.indexOf($scope.timeCardDayList[i].TaskName) == -1)
                                            taskNameArray.push($scope.timeCardDayList[i].TaskName);
                                            
                                        var key = $scope.timeCardDayList[i].SelectedProject+'-'+$scope.timeCardDayList[i].SelectedProTask+'-'+$scope.selectedEmployee+'-'+$scope.timeCardDayList[i].isBillable+'-'+$scope.timeCardDayList[i].payRollItem+'-'+$scope.timeCardDayList[i].locationId;
                    
                                        if(UniqueKeySet.indexOf(key) == -1)
                                            UniqueKeySet.push(key);
                                        
                                        // For future week Fringe tak type records display
                                        $scope.timeCardDayList[i].isVisible = true;
                                        
                                        if($scope.timeCardDayList[i].TaskType == 'Fringe' && moment($scope.FromDate).isAfter(new Date())) {
                                            $scope.timeCardDayList[i].isVisible = true;
                                        }
                                        
                                        if($scope.timeCardDayList[i].TaskType != 'Fringe' && moment($scope.FromDate).isAfter(new Date())) {
                                            $scope.timeCardDayList[i].isVisible = false;
                                        }
                                         
                                        // To make billable Check box disable for existing records
                                        $scope.timeCardDayList[i].disableBillable = true;
                                        
                                        
                                        // Added PayrollItem Picklist in table
                                        $scope.timeCardDayList[i].PayRollItemList = records.payRollItemList;
                                        
                                        // To make PayRoll Item disable for existing records
                                        $scope.timeCardDayList[i].disablePayRoll = true;
                                        
                                        $scope.timeCardDayList[i].Hrs1Error = '';
                                        $scope.timeCardDayList[i].Hrs2Error = '';
                                        $scope.timeCardDayList[i].Hrs3Error = '';
                                        $scope.timeCardDayList[i].Hrs4Error = '';
                                        $scope.timeCardDayList[i].Hrs5Error = '';
                                        $scope.timeCardDayList[i].Hrs6Error = '';
                                        $scope.timeCardDayList[i].Hrs7Error = '';
                                        
                                        $scope.timeCardDayList[i].holidayBoolean = false;
                                        
                                        // Forming project,Task,Payroll & Billable combination of single property
                                        var billableName = '';
                                        
                                        if($scope.timeCardDayList[i].isBillable)
                                            billableName = 'Billable';
                                        else
                                            billableName = 'Non-billable';
                                            
                                        var location = '';
                                        if($scope.timeCardDayList[i].locationName)
                                            location = $scope.timeCardDayList[i].locationName;
                                        else
                                            location = 'N/A';
                                            
                                        var uniqueValue = $scope.timeCardDayList[i].ProjectName+' / '+$scope.timeCardDayList[i].TaskName+' / '+$scope.timeCardDayList[i].payRollItem+' / '+billableName+' / '+location;
                                        
                                        $scope.timeCardDayList[i].project_Task_Payroll_Billable_Location = uniqueValue;
                                        $scope.timeCardDayList[i].showDetails = true;
                                        
                                        
                                        //For Unposted record Id capture
                                        
                                        if($scope.timeCardDayList[i].status1 == 'Unposted') $scope.UnpostedRecordIds.push($scope.timeCardDayList[i].Hrs1Day1Id);
                                        if($scope.timeCardDayList[i].status2 == 'Unposted') $scope.UnpostedRecordIds.push($scope.timeCardDayList[i].Hrs2Day2Id);
                                        if($scope.timeCardDayList[i].status3 == 'Unposted') $scope.UnpostedRecordIds.push($scope.timeCardDayList[i].Hrs3Day3Id);
                                        if($scope.timeCardDayList[i].status4 == 'Unposted') $scope.UnpostedRecordIds.push($scope.timeCardDayList[i].Hrs4Day4Id);
                                        if($scope.timeCardDayList[i].status5 == 'Unposted') $scope.UnpostedRecordIds.push($scope.timeCardDayList[i].Hrs5Day5Id);
                                        if($scope.timeCardDayList[i].status6 == 'Unposted') $scope.UnpostedRecordIds.push($scope.timeCardDayList[i].Hrs6Day6Id);
                                        if($scope.timeCardDayList[i].status7 == 'Unposted') $scope.UnpostedRecordIds.push($scope.timeCardDayList[i].Hrs7Day7Id);
                                        
                                        if($scope.timeCardDayList[i].CRRateType){
                                            $scope.timeCardDayList[i].CRRateType = decodeHTML($scope.timeCardDayList[i].CRRateType);
                                        }
                                        
                                        if(!$scope.existingSequenceNumber[$scope.timeCardDayList[i].TaskName])
                                            $scope.existingSequenceNumber[$scope.timeCardDayList[i].TaskName] = $scope.timeCardDayList[i].sequenceNumber;
                                    }
                                    
                                    console.log(':::::::$scope.existingSequenceNumber::::::',$scope.existingSequenceNumber);
                                    
                                    if(CheckHomeDeptExit) {

                                        if(firstRowIndex > -1) {
                                            $scope.timeCardDayList.splice(firstRowIndex,1);
                                            $scope.timeCardDayList.unshift(Obj);
                                            fringeRowsFormation(Obj);
                                        }else {
                                            $timeout(function() {
                                                //console.log(':::::btnCallingCount::::',btnCallingCount);
                                                if(btnCallingCount == 1)
                                                    allButtondisplay();
                                                
                                                callHomeDeptFormationFunction(); 
                                                addPreviousweekProjecttasks(); 
                                                notesSection_formation();
                                            },1000);
                                        }
                                        
                                        // Check home department project have location value
                                        
                                        if(Obj.locationId) {
                                            if(angular.isUndefined(Obj.locationId))
                                                $scope.homeDeptLocationValidation = {Id:Obj.SelectedProject,Name:Obj.ProjectName};
                                        }
                                        
                                        // check Project Task have values for Task Type & Payroll Items
                                       if(Obj.projectTasks) {
                                            for(var i = 0;i < Obj.projectTasks.length;i++) {
                                                if(angular.isUndefined(Obj.projectTasks[i].Project_Task_Type__c)) {
                                                   
                                                   if(!$scope.projectTaskValidation[Obj.projectTasks[i].Id] && Obj.projectTasks[i].Id != '--select--' 
                                                           && Obj.projectTasks[i].Name.indexOf('FMLA Non-Compensatory') == -1 
                                                           && Obj.projectTasks[i].Name.indexOf('Non-Compensatory') == -1
                                                     ) {
                                                           
                                                       $scope.projectTaskValidation[Obj.projectTasks[i].Id] = Obj.projectTasks[i].Name; 
                                                   }
                                                  
                                                }
                                            }
                                        }
                                        
                                        if(Object.keys($scope.homeDeptLocationValidation).length > 0) {
                                            displayLocationvalidationResult();
                                        }
                                        
                                        if(Object.keys($scope.homeDeptLocationValidation).length == 0 && Object.keys($scope.projectTaskValidation).length > 0)
                                            displayValidationResult();
                                        
                                        if($scope.timeCardDayList.length > 0) {
                                            $scope.timeCardDayList = _.sortBy($scope.timeCardDayList,'sequenceNumber');
                                            $scope.noRecordFound = false;
                                        } else {
                                            $scope.noRecordFound = true;
                                        }
                                        
                                    }else {
                                        callHomeDeptFormationFunction();
                                    }
                               
                                }else {
                                    callHomeDeptFormationFunction();
                                }
                                
                                //document.getElementById("spinner").style.display = 'none';
                                
                            },0);
                        } else {
                            console.log('::::ev::::',ev);
                            $scope.errorAccoured = true;
                            $scope.modelTitle = 'Error';
                            $scope.errorMessageforAllSave = ev.message;
                            document.getElementById("spinner").style.display = 'none';
                            $scope.modalStateForError = 'slds-fade-in-open';
                            $scope.modalBackdropStateForError = 'slds-modal-backdrop--open';
                            $scope.$apply();
                        }
                    },
                    {escape: true}
                ); 
        }
        
        function callHomeDeptFormationFunction() {
             var Obj = {
               Hours1:'',
               Hours2:'',
               Hours3:'',
               Hours4:'',
               Hours5:'',
               Hours6:'',
               Hours7:'',
               Day1:$scope.DaysList[0],
               Day2:$scope.DaysList[1],
               Day3:$scope.DaysList[2],
               Day4:$scope.DaysList[3],
               Day5:$scope.DaysList[4],
               Day6:$scope.DaysList[5],
               Day7:$scope.DaysList[6],
               Hrs1Error:'',
               Hrs2Error:'',
               Hrs3Error:'',
               Hrs4Error:'',
               Hrs5Error:'',
               Hrs6Error:'',
               Hrs7Error:'',
               isDisabled:false,
               Flag:false,
               HrsColourDisplay:'',
               isBillable:false,
               holidayBoolean: false
            };
            
            var selectObj = {Id:'--select--',Name:'--select--'};
            
            Obj.projects = $scope.WholeProjectList;
        
            for(var i = 0; i < $scope.WholeProjectList.length;i++) {
                if($scope.WholeProjectList[i].Id && $scope.WholeProjectList[i].Id != '--select--') {
                    
                    if($scope.WholeProjectList[i].Id == $scope.HomeDeprtProId) {
                        Obj.SelectedProject = $scope.WholeProjectList[i].Id;
                        Obj.isHomeDepartment = true;
                        Obj.ProjectName = $scope.WholeProjectList[i].Name;
                        Obj.projectRTName = $scope.WholeProjectList[i].RecordType.DeveloperName;
                        
                        if($scope.WholeProjectList[i].Training_Location__c) {
                            Obj.locationId = $scope.WholeProjectList[i].Training_Location__c;
                            Obj.locationName = $scope.WholeProjectList[i].Training_Location__r.Name;
                        }
                    }else {
                        //Obj.isHomeDepartment = false;
                    }
                }
            }
           
            var taskRecords = [];
            var FutureTaskRecords = [];
            
            $scope.projectTaskValidation = {};
          
            for(var i = 0;i < $scope.WholeTaskList.length;i++) {
            
                if($scope.WholeTaskList[i].AcctSeed__Project__c == Obj.SelectedProject) {
                    if($scope.WholeTaskList[i].Project_Task_Type__c) {
                    
                        taskRecords.push($scope.WholeTaskList[i]);
                        if($scope.WholeTaskList[i].Project_Task_Type__c == 'ADMINISTRATIVE' && $scope.WholeTaskList[i].Name.indexOf('ADMINISTRATIVE') != -1) {
                            Obj.SelectedProTask = $scope.WholeTaskList[i].Id;
                            Obj.TaskName = $scope.WholeTaskList[i].Name;
                            Obj.TaskType = $scope.WholeTaskList[i].Project_Task_Type__c;
                            Obj.Flag = true;
                           
                            var payrollItem = '';
                            if($scope.WholeTaskList[i].Payroll_Item__c == 'RNB')
                                payrollItem = $scope.WholeTaskList[i].Payroll_Item__c;
                            
                            var conAssign = _.filter($scope.contactAssignments, function(data) { 
                                    
                                if(data.Project__c == Obj.SelectedProject && data.Candidate_Name__c == $scope.selectedEmployee 
                                    && data.Payroll_Item__c != null) {
                                    return data;
                                }
                            });
                            
                            if(conAssign.length > 0) {
                                if(payrollItem)
                                    Obj.payRollItem = payrollItem;
                                else
                                    Obj.payRollItem = conAssign[0].Payroll_Item__c;
                                    
                                Obj.costRateId = conAssign[0].Rate_Card_Rate__c;
                                Obj.contactAssignId = conAssign[0].Id;
                                Obj.CRRateType = decodeHTML(conAssign[0].Rate_Card_Rate__r.Rate_Type__c);
                            }
                            
                            Obj.disablePayRoll = true;
                        }
                        
                        if($scope.WholeTaskList[i].Project_Task_Type__c == 'Fringe')
                            FutureTaskRecords.push($scope.WholeTaskList[i]);
                            
                    }else if(!$scope.WholeTaskList[i].Project_Task_Type__c){
                    
                        if(!$scope.projectTaskValidation[$scope.WholeTaskList[i].Id] && $scope.WholeTaskList[i].Id != '--select--'
                            && $scope.WholeTaskList[i].Name.indexOf('FMLA Non-Compensatory') == -1 
                            && $scope.WholeTaskList[i].Name.indexOf('Non-Compensatory') == -1 
                          ) {
                            
                            $scope.projectTaskValidation[$scope.WholeTaskList[i].Id] = $scope.WholeTaskList[i].Name;
                        }
                    }
                }
            }
            
            // For future week Fringe tak type records display
         
            Obj.isVisible = true;
            Obj.projectTasks = taskRecords;
           
           if(!Obj.SelectedProTask) {
               Obj.projectTasks.unshift(selectObj);
               Obj.SelectedProTask = Obj.projectTasks[0].Id;
            }
            
            if(!Obj.SelectedProject) {
                Obj.SelectedProject = Obj.projects[0].Id;
            }
            
            Obj.PayRollItemList = $scope.PayRollItems;
            
            var billableValue = '';
            
            if(Obj.isBillable)
                billableValue = 'Billable';
            else
                billableValue = 'Non-billable';
                
            var location = '';
            if(Obj.locationName)
                location = Obj.locationName;
            else
                location = 'N/A';
            
            Obj.project_Task_Payroll_Billable_Location = Obj.ProjectName+' / '+Obj.TaskName+' / '+Obj.payRollItem+' / '+billableValue+' / '+location;
            Obj.showDetails = true;
            
            // For sorting option
            Obj.sequenceNumber = 1;
            
            //$scope.timeCardDayList.splice(firstRowIndex,1);
            
            if($scope.HomeDeprtProId && Obj.TaskName == 'ADMINISTRATIVE') {
                $scope.timeCardDayList.unshift(Obj);
                $scope.timeCardDayQryFunction(Obj,'Not Include','Not change Position');
            }
            $scope.totalHrsCalculation(Obj);
            
            //Check the CR Rate type value before calling fringe formation
            if(Obj.projectRTName == 'Linguist_Support_Projects') {
                var conAssign = _.filter($scope.contactAssignments, function(data) { 
                    if(data.Project__c == Obj.SelectedProject && data.Candidate_Name__c == $scope.selectedEmployee 
                        && data.Payroll_Item__c != null) {
                        return data;
                    }
                });
                
                var displayBenefitPT = false;
                
                if(conAssign.length > 0 && conAssign[0].Rate_Card_Rate__c && decodeHTML(conAssign[0].Rate_Card_Rate__r.Rate_Type__c) == 'FT Salary & Benefits') {
                    displayBenefitPT = true;
                }
                
                if(displayBenefitPT){
                    fringeRowsFormation(Obj);
                }else {
                    actionsAfterDefaultRowFormation();
                }
                
            }else {
                fringeRowsFormation(Obj);
            }
            
            // Home Department project validation
            
            $scope.homeDeptLocationValidation = {};
            
            if(Obj.isHomeDepartment && !Obj.locationId) {
                $scope.homeDeptLocationValidation = {Id:Obj.SelectedProject,Name:Obj.ProjectName};
            }
            
            if(Object.keys($scope.homeDeptLocationValidation).length > 0)
                displayLocationvalidationResult();
            
            //Call Task Validation msg display function
            if(Object.keys($scope.homeDeptLocationValidation).length == 0 && Object.keys($scope.projectTaskValidation).length > 0)
                displayValidationResult();
            
        }
        
        function fringeRowsFormation(Obj) {            
            // For Fringe details
            
            var selectObj = {Id:'--select--',Name:'--select--'};
            
            if(Obj.isHomeDepartment) {
                var Obj1 = {
                   Hours1:'',
                   Hours2:'',
                   Hours3:'',
                   Hours4:'',
                   Hours5:'',
                   Hours6:'',
                   Hours7:'',
                   Day1:$scope.DaysList[0],
                   Day2:$scope.DaysList[1],
                   Day3:$scope.DaysList[2],
                   Day4:$scope.DaysList[3],
                   Day5:$scope.DaysList[4],
                   Day6:$scope.DaysList[5],
                   Day7:$scope.DaysList[6],
                   Hrs1Error:'',
                   Hrs2Error:'',
                   Hrs3Error:'',
                   Hrs4Error:'',
                   Hrs5Error:'',
                   Hrs6Error:'',
                   Hrs7Error:'',
                   SelectedProject:Obj.SelectedProject,
                   Flag:true,
                   isBillable:false,
                   PayRollItemList: $scope.PayRollItems,
                   holidayBoolean: false,
                   isHomeDepartment: Obj.isHomeDepartment
                };
                
                var Obj2 = {
                   Hours1:'',
                   Hours2:'',
                   Hours3:'',
                   Hours4:'',
                   Hours5:'',
                   Hours6:'',
                   Hours7:'',
                   Day1:$scope.DaysList[0],
                   Day2:$scope.DaysList[1],
                   Day3:$scope.DaysList[2],
                   Day4:$scope.DaysList[3],
                   Day5:$scope.DaysList[4],
                   Day6:$scope.DaysList[5],
                   Day7:$scope.DaysList[6],
                   Hrs1Error:'',
                   Hrs2Error:'',
                   Hrs3Error:'',
                   Hrs4Error:'',
                   Hrs5Error:'',
                   Hrs6Error:'',
                   Hrs7Error:'',
                   SelectedProject:Obj.SelectedProject,
                   Flag:true,
                   isBillable:false,
                   PayRollItemList: $scope.PayRollItems,
                   holidayBoolean: false,
                   isHomeDepartment: Obj.isHomeDepartment
                };
                
                var Obj3 = {
                   Hours1:'',
                   Hours2:'',
                   Hours3:'',
                   Hours4:'',
                   Hours5:'',
                   Hours6:'',
                   Hours7:'',
                   Day1:$scope.DaysList[0],
                   Day2:$scope.DaysList[1],
                   Day3:$scope.DaysList[2],
                   Day4:$scope.DaysList[3],
                   Day5:$scope.DaysList[4],
                   Day6:$scope.DaysList[5],
                   Day7:$scope.DaysList[6],
                   Hrs1Error:'',
                   Hrs2Error:'',
                   Hrs3Error:'',
                   Hrs4Error:'',
                   Hrs5Error:'',
                   Hrs6Error:'',
                   Hrs7Error:'',
                   SelectedProject:Obj.SelectedProject,
                   Flag:true,
                   isBillable:false,
                   PayRollItemList: $scope.PayRollItems,
                   holidayBoolean: false,
                   isHomeDepartment: Obj.isHomeDepartment
                };
                
                for(var i = 0;i < $scope.WholeTaskList.length;i++) {
                    
                    if($scope.WholeTaskList[i].AcctSeed__Project__c == Obj.SelectedProject 
                        && $scope.WholeTaskList[i].Project_Task_Type__c != 'ADMINISTRATIVE' 
                        && taskNameArray.indexOf($scope.WholeTaskList[i].Name) == -1) {
                        
                        if($scope.WholeTaskList[i].Project_Task_Type__c == 'Fringe' &&
                            $scope.WholeTaskList[i].Name.indexOf('Holiday') != -1) {
                            
                            Obj1.projectTasks = $scope.WholeTaskList[i];
                            Obj1.SelectedProTask = $scope.WholeTaskList[i].Id;
                            Obj1.TaskName = $scope.WholeTaskList[i].Name;
                            
                            // Remove extra space in between (-) symbol
                            if(Obj1.TaskName.indexOf(' - '))
                                Obj1.TaskName = removeExtraSpace(Obj1);
                            
                            Obj1.ProjectName = $scope.WholeTaskList[i].AcctSeed__Project__r.Name;
                            Obj1.isVisible = true;
                            Obj1.TaskType = 'Fringe';
                            Obj1.projectRTName = $scope.WholeTaskList[i].AcctSeed__Project__r.RecordType.DeveloperName;
                            
                            if($scope.task_PayrollItemMap[Obj1.TaskName]) {
                                Obj1.PayRollItemList = $scope.task_PayrollItemMap[Obj1.TaskName];
                                Obj1.payRollItem = Obj1.PayRollItemList.length > 0 ? Obj1.PayRollItemList[0]:null;
                            }
                            
                            var conAssign = _.filter($scope.contactAssignments, function(data) { 
                                if(data.Project__c == Obj1.SelectedProject && data.Candidate_Name__c == $scope.selectedEmployee) {
                                    return data;
                                }
                            });
                            
                            if(conAssign.length > 0) {
                                
                                Obj1.contactAssignId = conAssign[0].Id;
                                Obj1.costRateId = conAssign[0].Rate_Card_Rate__c;
                                Obj1.CRRateType = decodeHTML(conAssign[0].Rate_Card_Rate__r.Rate_Type__c);
                            }
                            
                            Obj1.disablePayRoll = true;
                            
                            Obj1.locationId = Obj.locationId;
                            Obj1.locationName = Obj.locationName;
                            
                            var billableValue = '';
                            if(Obj1.isBillable)
                                billableValue = 'Billable';
                            else
                                billableValue = 'Non-billable';
                            
                            var location = '';
                            if(Obj1.locationName)
                                location = Obj1.locationName;
                            else
                                location = 'N/A';
                            
                            Obj1.project_Task_Payroll_Billable_Location = Obj1.ProjectName+' / '+Obj1.TaskName+' / '+Obj1.payRollItem+' / '+billableValue+' / '+location;
                            Obj1.showDetails = true;
                            
                            // For sorting option
                            if(!$scope.existingSequenceNumber[Obj1.TaskName])
                                Obj1.sequenceNumber = 2;
                            
                        }
                        
                        if($scope.WholeTaskList[i].Project_Task_Type__c == 'Fringe' 
                            && $scope.WholeTaskList[i].Name.indexOf('Sick') != -1) {
                            
                            Obj2.projectTasks = $scope.WholeTaskList[i];
                            Obj2.SelectedProTask = $scope.WholeTaskList[i].Id;
                            Obj2.TaskName = $scope.WholeTaskList[i].Name;
                            
                            // Remove extra space in between (-) symbol
                            if(Obj2.TaskName.indexOf(' - '))
                                Obj2.TaskName = removeExtraSpace(Obj2);
                            
                            Obj2.ProjectName = $scope.WholeTaskList[i].AcctSeed__Project__r.Name;
                            Obj2.isVisible = true;
                            Obj2.TaskType = 'Fringe';
                            Obj2.projectRTName = $scope.WholeTaskList[i].AcctSeed__Project__r.RecordType.DeveloperName;
                            
                            if($scope.task_PayrollItemMap[Obj2.TaskName]) {
                                Obj2.PayRollItemList = $scope.task_PayrollItemMap[Obj2.TaskName];
                                Obj2.payRollItem = Obj2.PayRollItemList.length > 0 ? Obj2.PayRollItemList[0]:null;
                            }
                           
                            var conAssign = _.filter($scope.contactAssignments, function(data) { 
                                if(data.Project__c == Obj2.SelectedProject && data.Candidate_Name__c == $scope.selectedEmployee) {
                                    return data;
                                }
                            });
                            
                            if(conAssign.length > 0) {
                                Obj2.contactAssignId = conAssign[0].Id;
                                Obj2.costRateId = conAssign[0].Rate_Card_Rate__c;
                                Obj2.CRRateType = decodeHTML(conAssign[0].Rate_Card_Rate__r.Rate_Type__c);
                            }
                            
                            Obj2.disablePayRoll = true;
                            
                            Obj2.locationId = Obj.locationId;
                            Obj2.locationName = Obj.locationName;
                            
                            var billableValue = '';
                            if(Obj2.isBillable)
                                billableValue = 'Billable';
                            else
                                billableValue = 'Non-billable';
                            
                            var location = '';
                            if(Obj2.locationName)
                                location = Obj2.locationName;
                            else
                                location = 'N/A';
                                
                            Obj2.project_Task_Payroll_Billable_Location = Obj2.ProjectName+' / '+Obj2.TaskName+' / '+Obj2.payRollItem+' / '+billableValue+' / '+location;
                            Obj2.showDetails = true;
                            
                            // For sorting option
                            if(!$scope.existingSequenceNumber[Obj2.TaskName])
                                Obj2.sequenceNumber = 3;
                        }
                        
                        if($scope.WholeTaskList[i].Project_Task_Type__c == 'Fringe' 
                            && $scope.WholeTaskList[i].Name.indexOf('Vacation') != -1) {
                            
                            Obj3.projectTasks = $scope.WholeTaskList[i];
                            Obj3.SelectedProTask = $scope.WholeTaskList[i].Id;
                            Obj3.TaskName = $scope.WholeTaskList[i].Name;
                            // Remove extra space in between (-) symbol
                            if(Obj3.TaskName.indexOf(' - '))
                                Obj3.TaskName = removeExtraSpace(Obj3);
                            
                            Obj3.ProjectName = $scope.WholeTaskList[i].AcctSeed__Project__r.Name;
                            Obj3.isVisible = true;
                            Obj3.TaskType = 'Fringe';
                            Obj3.projectRTName = $scope.WholeTaskList[i].AcctSeed__Project__r.RecordType.DeveloperName;
                           
                            if($scope.task_PayrollItemMap[Obj3.TaskName]) {
                                
                                Obj3.PayRollItemList = $scope.task_PayrollItemMap[Obj3.TaskName];
                                Obj3.payRollItem = Obj3.PayRollItemList.length > 0 ? Obj3.PayRollItemList[0]:null;
                            }
                           
                            var conAssign = _.filter($scope.contactAssignments, function(data) { 
                                if(data.Project__c == Obj3.SelectedProject && data.Candidate_Name__c == $scope.selectedEmployee) {
                                    return data;
                                }
                            });
                            
                            if(conAssign.length > 0) {
                                
                                Obj3.contactAssignId = conAssign[0].Id;
                                Obj3.costRateId = conAssign[0].Rate_Card_Rate__c;
                                Obj3.CRRateType = decodeHTML(conAssign[0].Rate_Card_Rate__r.Rate_Type__c);
                            }
                            
                            Obj3.disablePayRoll = true;
                            
                            Obj3.locationId = Obj.locationId;
                            Obj3.locationName = Obj.locationName;
                            
                            var billableValue = '';
                            if(Obj3.isBillable)
                                billableValue = 'Billable';
                            else
                                billableValue = 'Non-billable';
                            
                            var location = '';
                            if(Obj3.locationName)
                                location = Obj3.locationName;
                            else
                                location = 'N/A';
                            
                            Obj3.project_Task_Payroll_Billable_Location = Obj3.ProjectName+' / '+Obj3.TaskName+' / '+Obj3.payRollItem+' / '+billableValue+' / '+location;
                            Obj3.showDetails = true;
                            
                            // For sorting option
                            if(!$scope.existingSequenceNumber[Obj3.TaskName])
                                Obj3.sequenceNumber = 4;
                        }
                    }
                }
                              
                
                if($scope.EEPayStatus != 'Hourly - PT') {
                    if(Obj1.projectTasks) {
                        // For existing records check
                        $scope.timeCardDayQryFunction(Obj1,'Include','Holiday');
                    }
                    if(Obj2.projectTasks) {
                        // For existing records check
                        $scope.timeCardDayQryFunction(Obj2,'Include','Sick');
                    }
                    if(Obj3.projectTasks) {
                        // For existing records check
                        $scope.timeCardDayQryFunction(Obj3,'Include','Vacation');
                    }
                }
            }
            
            console.log(':::fringe form:::$scope.timeCardDayList:::::',$scope.timeCardDayList);
            actionsAfterDefaultRowFormation();
        }
        
        function actionsAfterDefaultRowFormation(){
            $timeout(function() {
                //console.log('::::enter:::timeout::',$scope.timeCardDayList.length);
                if($scope.timeCardDayList.length > 0) {
                    $scope.timeCardDayList = _.sortBy($scope.timeCardDayList,'sequenceNumber');
                    $scope.noRecordFound = false;
                } else {
                    $scope.noRecordFound = true;
                }
            },1200);
                
            if(!$scope.AddBtnDisplay && !booleanForbeforelastWeek) {
                $scope.modalStateForLockDate = 'slds-fade-in-open';
                $scope.modalBackdropStateForLockDate = 'slds-modal-backdrop--open';
            }
            
            // This method for displaying buttons on Page - 2nd time call when date range changes
            if(btnCallingCount == 1)
                allButtondisplay();
                
            // Call previous week row formation method
            // Added timeout to avoid sequence number miss match ordering
            $timeout(function() {
                addPreviousweekProjecttasks(); 
            },1500);
            
            $timeout(function() {
                notesSection_formation();
            },1000);
           
        }
        
        //To remove the extra space in task name (extra space in between (-) symbol)
        function removeExtraSpace(record) {
            if(record.TaskName.indexOf(' - '))
                return record.TaskName = record.TaskName.split(' - ').join('-');
        }
                
        // This function for Button display
        
        function allButtondisplay() {
            
            //document.getElementById("spinner").style.display = 'block';
            
            $scope.saveBtnDisplay = false;
            $scope.recallBtnDisplay = false;
            $scope.submitBtnDisplay = false;
            if($scope.sitePage)
                $scope.cancelBtnDisplay = true;
        
            // This below code for Btn hide / show operation
            var statusArray = [];
            
            for(var i = 0;i < $scope.timeCardDayList.length;i++) {
                
                if($scope.timeCardDayList[i].status1 && $scope.timeCardDayList[i].status1 != 'Unposted') {
                    statusArray.push($scope.timeCardDayList[i].status1);
                }
                if($scope.timeCardDayList[i].status2 && $scope.timeCardDayList[i].status2 != 'Unposted') {
                    statusArray.push($scope.timeCardDayList[i].status2);
                }
                if($scope.timeCardDayList[i].status3 && $scope.timeCardDayList[i].status3 != 'Unposted') {
                    statusArray.push($scope.timeCardDayList[i].status3);
                }
                if($scope.timeCardDayList[i].status4 && $scope.timeCardDayList[i].status4 != 'Unposted') {
                    statusArray.push($scope.timeCardDayList[i].status4);
                }
                if($scope.timeCardDayList[i].status5 && $scope.timeCardDayList[i].status5 != 'Unposted') {
                    statusArray.push($scope.timeCardDayList[i].status5);
                }
                if($scope.timeCardDayList[i].status6 && $scope.timeCardDayList[i].status6 != 'Unposted') {
                    statusArray.push($scope.timeCardDayList[i].status6);
                }
                if($scope.timeCardDayList[i].status7 && $scope.timeCardDayList[i].status7 != 'Unposted') {
                    statusArray.push($scope.timeCardDayList[i].status7);
                }
            }
            
            console.log('::::::statusArray:::::',statusArray);
            
            var submitCnt = 0;
            var approvedCnt = 0;
            var rejectedCnt = 0;
            var recallCnt = 0;
            var revertCnt = 0;
            $scope.revertCnt = 0 // For Hrs disable operation
            var otherStatusCnt = 0; // For Draft
            
            $scope.disableInputBox = false;
            
            var TotalRecCount = statusArray.length;
            
            currentWeekboolean = false;
            booleanForbeforelastWeek = false;
            
            // this conditon to check selected week is current week or not
            if( moment(new Date()).isBetween($scope.FromDate, $scope.ToDate) 
                || moment(new Date()).isSame($scope.FromDate)
                || moment(new Date()).isSame($scope.ToDate)) {
                
                currentWeekboolean = true;
            }else {
                currentWeekboolean = false;
            }
            
            // this is to check selected week range is before last week or not
            
            var currWeekStart = moment(new Date()).startOf('week').add(1,'days').format('YYYY-MM-DD');
            var currWeekEnd = moment(currWeekStart).add(6,'days').format('YYYY-MM-DD');
            
            var preWeekSt = moment(currWeekStart).subtract(7,'days').format('YYYY-MM-DD');
            var preWeekEnd = moment(preWeekSt).add(6,'days').format('YYYY-MM-DD');
            
            // this conditon to check selected week is current week or not
            if( moment($scope.FromDate).isBefore(preWeekSt)
                && moment($scope.ToDate).isBefore(preWeekEnd)) {
                
                booleanForbeforelastWeek = true;
            }else {
                booleanForbeforelastWeek = false;
            }
            
            $scope.isBeforeLastWeek = booleanForbeforelastWeek;
            
            console.log(':::::::currentWeekboolean::::::',currentWeekboolean);
            
            for(var i = 0;i < statusArray.length;i++) {
                
                // This is for Submit
                
                if(statusArray[i] == 'Submitted') {
                    submitCnt = submitCnt + 1;
                }
                // This is for approved
                
                if(statusArray[i] == 'Approved' || statusArray[i] == 'Admin Approved') {
                    approvedCnt = approvedCnt + 1;
                }
                
                // This is for Rejected
                
                if(statusArray[i] == 'Rejected') {
                    rejectedCnt = rejectedCnt + 1;
                }
                
                // This for Recalled
                if(statusArray[i] == 'Recalled') {
                    recallCnt = recallCnt + 1;
                }
                
                // This is for Draft / Reverted
                
                if(statusArray[i] == 'Draft') {
                    otherStatusCnt = otherStatusCnt + 1;
                }
                
                // This is for Reverted
                
                if(statusArray[i] == 'Reverted') {
                    revertCnt = revertCnt + 1;
                    $scope.revertCnt = $scope.revertCnt + 1;
                }
            }
            
            console.log('::::::1::::submitCnt:::',submitCnt);
            console.log('::::::2:::approvedCnt::::',approvedCnt);
            console.log('::::::3:::rejectedCnt::::',rejectedCnt);
            console.log('::::::4:::recallCnt::::',recallCnt);
            console.log('::::::5:::revertCnt::::',revertCnt);
            console.log('::::::6:::otherStatusCnt::::',otherStatusCnt);
            console.log(':::::7:TotalRecCount::::::',TotalRecCount);
            
            if(statusArray.length > 0) {
            
                if(!booleanForbeforelastWeek) { // This condition to check selected week range is before last week - then dont show any btns
                    
                    if(currentWeekboolean) {
                        if(submitCnt > 0 || (approvedCnt > 0 && approvedCnt != TotalRecCount) 
                            && rejectedCnt == 0 && otherStatusCnt == 0 && revertCnt == 0) {        // For Recall btn display conditions
                            $scope.recallBtnDisplay = true;
                            $scope.disableInputBox = true;
                            
                            if($scope.sitePage)
                                $scope.cancelBtnDisplay = false;
                        }
                        
                        if(submitCnt == 0 && (rejectedCnt > 0 || recallCnt > 0 || (approvedCnt > 0 && approvedCnt != TotalRecCount) 
                            || otherStatusCnt > 0 || revertCnt > 0)) {    // For Submit & Save btn display
                            
                            $scope.saveBtnDisplay = true;
                            $scope.submitBtnDisplay = true;
                            
                            if($scope.sitePage)
                                $scope.cancelBtnDisplay = true;
                        }
                        
                        // For all approved / Admin appoved conditions
                        if(approvedCnt > 0 && approvedCnt == TotalRecCount) {
                            $scope.recallBtnDisplay = true;
                            $scope.disableInputBox = true;
                            
                            if($scope.sitePage)
                                $scope.cancelBtnDisplay = false;
                        }
                            
                    }else {
                        // Last Week btns display conditions
                        if(submitCnt > 0) {
                            $scope.recallBtnDisplay = true;                // For Recall btn display conditions
                            $scope.disableInputBox = true;
                            
                            if($scope.sitePage)
                                $scope.cancelBtnDisplay = false;
                        }
                        
                        if(submitCnt == 0 && (otherStatusCnt > 0 || rejectedCnt > 0 || recallCnt > 0 || revertCnt > 0)){    // For Save & Submit btn display
                            $scope.saveBtnDisplay = true;
                            $scope.submitBtnDisplay = true;
                            
                            if($scope.sitePage)
                                $scope.cancelBtnDisplay = true;
                        }
                    }
                    
                }else {
                    // For all other past weeks btns display
                    if(revertCnt > 0) {
                        $scope.saveBtnDisplay = true;
                        $scope.submitBtnDisplay = true;
                        
                        $scope.AddBtnDisplay = true;
                        
                        if($scope.sitePage)
                            $scope.cancelBtnDisplay = true;
                    }
                }
                
            }else {
                
                if(!booleanForbeforelastWeek) {
                    $scope.saveBtnDisplay = true;
                    $scope.recallBtnDisplay = false;
                    $scope.submitBtnDisplay = true;
                    
                    if($scope.sitePage)
                        $scope.cancelBtnDisplay = true;
                }else {
                    $scope.saveBtnDisplay = false;
                    $scope.recallBtnDisplay = false;
                    $scope.submitBtnDisplay = false;
                    if($scope.sitePage)
                        $scope.cancelBtnDisplay = true;
                }
            }
            
            if(booleanForbeforelastWeek || $scope.recallBtnDisplay || (!$scope.saveBtnDisplay && !$scope.submitBtnDisplay))
                $scope.AddBtnDisplay = false;
                
            
            console.log($scope.saveBtnDisplay);
            console.log($scope.recallBtnDisplay);
            console.log($scope.submitBtnDisplay);

            
           //document.getElementById("spinner").style.display = 'none';
        }
        
        function addPreviousweekProjecttasks() {
            console.log('::::::enter::previousweek PT::::');
            for(var key in $scope.PreviousWeekMap) {
                if($scope.PreviousWeekMap.hasOwnProperty(key)) {
                    if(UniqueKeySet.indexOf(key) == -1 && $scope.PreviousWeekMap[key].display_LineRec_Future) {
                        var Obj = $scope.PreviousWeekMap[key];
                        Obj.Hours1 = '';
                        Obj.Hours2 = '';
                        Obj.Hours3 = '';
                        Obj.Hours4 = '';
                        Obj.Hours5 = '';
                        Obj.Hours6 = '';
                        Obj.Hours7 = '';
                        Obj.Hrs1Error = '';
                        Obj.Hrs2Error = '';
                        Obj.Hrs3Error = '';
                        Obj.Hrs4Error = '';
                        Obj.Hrs5Error = '';
                        Obj.Hrs6Error = '';
                        Obj.Hrs7Error = '';
                        Obj.Flag = true;
                        Obj.isDisabled = true;
                        // Changed this line for client requirment
                        Obj.isVisible = Obj.display_LineRec_Future;
                        //Obj.isVisible = true;
                        
                        Obj.PayRollItemList = $scope.PayRollItems;
                        if($scope.timeCardDayList.length > 0) {
                            Obj.projects = $scope.timeCardDayList[0].projects;
                        }
                        
                        Obj.projectTasks = _.filter($scope.WholeTaskList, function(data){ 
                                                                        if(data.AcctSeed__Project__c == Obj.SelectedProject)
                                                                            return data; 
                                                                    });
                        Obj.disablePayRoll = true;
                        Obj.disableBillable = true;
                        
                        if($scope.timeCardDayList.length > 0) {
                            Obj.Day1 = millisecondToString($scope.timeCardDayList[0].Day1);
                            Obj.Day2 = millisecondToString($scope.timeCardDayList[0].Day2);
                            Obj.Day3 = millisecondToString($scope.timeCardDayList[0].Day3);
                            Obj.Day4 = millisecondToString($scope.timeCardDayList[0].Day4);
                            Obj.Day5 = millisecondToString($scope.timeCardDayList[0].Day5);
                            Obj.Day6 = millisecondToString($scope.timeCardDayList[0].Day6);
                            Obj.Day7 = millisecondToString($scope.timeCardDayList[0].Day7);
                        }else {
                            Obj.Day1 = $scope.DaysList[0];
                            Obj.Day2 = $scope.DaysList[1];
                            Obj.Day3 = $scope.DaysList[2];
                            Obj.Day4 = $scope.DaysList[3];
                            Obj.Day5 = $scope.DaysList[4];
                            Obj.Day6 = $scope.DaysList[5];
                            Obj.Day7 = $scope.DaysList[6];
                        }
                        
                        Obj.selectedLocation = {Id:Obj.locationId,Name:Obj.locationName};
                        
                        var billableValue = '';
                        if(Obj.isBillable)
                            billableValue = 'Billable';
                        else
                            billableValue = 'Non-billable';
                        
                        var location = '';
                        if(Obj.locationName)
                            location = Obj.locationName;
                        else
                            location = 'N/A';
                        
                        Obj.project_Task_Payroll_Billable_Location = Obj.ProjectName+' / '+Obj.TaskName+' / '+Obj.payRollItem+' / '+billableValue+' / '+location;
                        Obj.showDetails = true;
                        
                        if($scope.timeCardDayList.length > 0) {
                            Obj.sequenceNumber = $scope.timeCardDayList[$scope.timeCardDayList.length - 1].sequenceNumber + 1;
                        }else {
                            Obj.sequenceNumber = 1;
                        }
                        
                        $scope.timeCardDayList.push(Obj);
                        UniqueKeySet.push(key);
                        
                    }
                }
            }
            
            if($scope.timeCardDayList.length > 0) {
                $scope.noRecordFound = false;
            } else {
                $scope.noRecordFound = true;
            }
            
            console.log('::after:::::previous:::week::::psuh:::::::::',$scope.timeCardDayList);
            document.getElementById("spinner").style.display = 'none';
            
        }
        
        function notesSection_formation() {
            
            //Comments List formation for Unposted records
            
            $scope.commentsList = [];
            
            for(var i = 0;i < $scope.accountSnapshotDetails.length;i++) {
                
                if($scope.accountSnapshotDetails[i].Time_Card_Day__c && snapshotIDsSet.indexOf($scope.accountSnapshotDetails[i].Id) == -1) {
                    var commentObj = {
                        UserName:  $scope.accountSnapshotDetails[i].CreatedBy.Name,
                        Edited: millisecondToDateTimeString($scope.accountSnapshotDetails[i].CreatedDate),
                        ChargeCode: $scope.accountSnapshotDetails[i].Time_Card_Line__r.AcctSeed__Project_Task__r.AcctSeed__Project__r.Name,
                        TaskName: $scope.accountSnapshotDetails[i].Time_Card_Line__r.AcctSeed__Project_Task__r.Name,
                        NewHrs: $scope.accountSnapshotDetails[i].Time_Card_Day__r.Total_Hours_Before_Approved__c,
                        OldHrs: $scope.accountSnapshotDetails[i].Total_Hours_Before_Approved__c,
                        OldStatus: $scope.accountSnapshotDetails[i].TCD_Status__c,
                        Comment: $scope.accountSnapshotDetails[i].Internal_Comment__c ? decodeHTML($scope.accountSnapshotDetails[i].Internal_Comment__c) : $scope.accountSnapshotDetails[i].Internal_Comment__c,
                        Date: millisecondToString($scope.accountSnapshotDetails[i].Date__c),
                        ReferenceId: $scope.accountSnapshotDetails[i].Reference_Id__c,
                        NewStatus: $scope.accountSnapshotDetails[i].TCD_New_Status__c,
                        createdDate: $scope.accountSnapshotDetails[i].CreatedDate
                    };
                    
                    commentFormationList.push(commentObj);
                }
                
            }
            
            var commentMap = {};
            for(var i = 0;i < commentFormationList.length;i++) {
                if(!commentFormationList[i].ReferenceId) {
                    if(commentFormationList[i].Edited){
                        // For sorting value purpose
                        var format1 = commentFormationList[i].Edited.split(' ')[0].split('-')[1]+'/'+commentFormationList[i].Edited.split(' ')[0].split('-')[2]+'/'+commentFormationList[i].Edited.split(' ')[0].split('-')[0];
                        var format2 = commentFormationList[i].Edited.split(' ')[1].split(':')[0]+':'+commentFormationList[i].Edited.split(' ')[1].split(':')[1];
                        
                        commentFormationList[i].DateTime = format1+commentFormationList[i].Edited.split(' ')[1]+commentFormationList[i].Edited.split(' ')[2];
                    }
                    
                    $scope.commentsList.push(commentFormationList[i]);
                }else {
                    if(!commentMap[commentFormationList[i].ReferenceId]) {
                        commentMap[commentFormationList[i].ReferenceId] = [];
                        var rec = commentFormationList[i];
                        rec.ChargeCode = '';
                        rec.Edited = '';
                        rec.TaskName = '';
                        rec.Date = '';
                        rec.NewHrs = '';
                        rec.OldHrs = '';
                        rec.OldStatus = '';
                        rec.NewStatus = '';
                        rec.DateTime = commentFormationList[i].ReferenceId.split(' ')[1]+commentFormationList[i].ReferenceId.split(' ')[2]+commentFormationList[i].ReferenceId.split(' ')[3];
                        $scope.commentsList.push(rec);
                    } else {
                        commentMap[commentFormationList[i].ReferenceId].push(commentFormationList[i]);
                    } 
                }
            }
            
            //console.log(':::::$scope.commentsList:::dhfagdaj:::',$scope.commentsList);
            //console.log('::::::commentMap::::::::',commentMap);
            
            if($scope.commentsList.length > 0)
                $scope.NotesSectionDisplay = false;
            else
                $scope.NotesSectionDisplay = true;
            
        }
        
        $scope.populateProjectTask = function(record) {
            
            var taskDetails = $scope.WholeTaskList;
            record.projectTasks = [];
            
            if(record.SelectedProject == $scope.HomeDeprtProId) {
                record.isHomeDepartment = true;
            }else {
                record.isHomeDepartment = false;
            }
            
            // Added this code for Satff community
            var isSitepage = false;
            if('{!$Site.Name}' != '') {
                isSitepage = true;
            }
            
            var taskTypeArray = ['Language Training','Interpretation (per hr)','Curriculum Development','Localization','Language Testing','Translation (per hr)','Translation','Preparation time','FMLA'];
            
            var nonAdminProjectRTNames = ['EFL_Projects','CD_Projects','Linguist_Support_Projects'];
            
            //Qry selected project task & contact related contact assingments to filter the project task selection for Linguist Support Projects
            // Added by NS on Nov 30 2018
            var conAssign = [];
            var displayBenefitPT = false;
            conAssign = _.filter($scope.contactAssignments, function(data) {
                            if(data.Project__c == record.SelectedProject && data.Candidate_Name__c == $scope.selectedEmployee) {
                                return data;
                            }
                        });
            var conAssignProjectTaskId = '';
            if(conAssign.length > 0 && conAssign[0].Rate_Card_Rate__c && (decodeHTML(conAssign[0].Rate_Card_Rate__r.Rate_Type__c) == 'Non-SCA CD' 
                || decodeHTML(conAssign[0].Rate_Card_Rate__r.Rate_Type__c) == 'PT Hourly (OH & G&A)')) {
                conAssignProjectTaskId = conAssign[0].Project_Task__c;
            }else if(conAssign.length > 0 && conAssign[0].Rate_Card_Rate__c && decodeHTML(conAssign[0].Rate_Card_Rate__r.Rate_Type__c) == 'FT Salary & Benefits'){
                displayBenefitPT = true;
            }
            
            var filterData = _.filter(taskDetails, function(data){ 
                if(isSitepage && $scope.ContactRT == 'Candidate') {
                    // For Linguist Support Project related task filtering
                    if(data.AcctSeed__Project__r.RecordType.DeveloperName != 'Linguist_Support_Projects') {
                        if(data.AcctSeed__Project__c == record.SelectedProject && data.Project_Task_Type__c != 'Fringe') {
                            return data;
                        }
                    }else if(data.AcctSeed__Project__c == record.SelectedProject && 
                        data.AcctSeed__Project__r.RecordType.DeveloperName == 'Linguist_Support_Projects'){
                         if(conAssignProjectTaskId && data.Id == conAssignProjectTaskId){
                             return data;
                         }else if(displayBenefitPT){
                             return data;
                         }else if(!conAssignProjectTaskId && !displayBenefitPT && data.RecordType.Name != 'Fringe'){
                             return data;
                         }
                    }
                    
                }else {
                  
                    // For Admin Projects
                    if(data.AcctSeed__Project__c == record.SelectedProject && data.AcctSeed__Project__r.RecordType.DeveloperName == 'Admin_Projects'){
                        if(data.Name.indexOf('Fringe-Holiday') == -1 && $scope.EEPayStatus != 'Hourly - PT') {
                            return data;
                        } else if(data.Project_Task_Type__c != 'Fringe') {
                            return data;
                        }
                    }
                    
                    // For Non Admin,Non EFL & Non Linguistic Projects
                    if(data.AcctSeed__Project__c == record.SelectedProject && data.AcctSeed__Project__r.RecordType.DeveloperName != 'Admin_Projects' 
                        && nonAdminProjectRTNames.indexOf(data.AcctSeed__Project__r.RecordType.DeveloperName) == -1){
                        
                        if(taskTypeArray.indexOf(data.Project_Task_Type__c) != -1 && ( !data.Parent_Project_Task__c 
                            || data.Name.indexOf('Language Training- Preparation') != -1) ){
                            return data;
                        }
                    }
                    
                    // For EFL & Linguist Projects (CD Projects)
                    if(data.AcctSeed__Project__c == record.SelectedProject 
                        && nonAdminProjectRTNames.indexOf(data.AcctSeed__Project__r.RecordType.DeveloperName) != -1){
                        
                        // For Linguist Support Project related task filtering
                        if(data.AcctSeed__Project__r.RecordType.DeveloperName != 'Linguist_Support_Projects') {
                            return data;
                        }else if(data.AcctSeed__Project__r.RecordType.DeveloperName == 'Linguist_Support_Projects'){
                             if(conAssignProjectTaskId && data.Id == conAssignProjectTaskId){
                                 return data;
                             }else if(displayBenefitPT) {
                                 return data;
                             }else if(!conAssignProjectTaskId && !displayBenefitPT && data.RecordType.Name != 'Fringe'){
                                 return data;
                             }
                        }
                    }
                }
            });
            
            var futureProTasks = _.filter(taskDetails, function(data){ 
                if(data.AcctSeed__Project__c == record.SelectedProject && data.Project_Task_Type__c == 'Fringe' 
                    && data.AcctSeed__Project__r.RecordType.DeveloperName == 'Admin_Projects') {
                    return data; 
                }else if(data.AcctSeed__Project__c == record.SelectedProject && data.AcctSeed__Project__r.RecordType.DeveloperName != 'Admin_Projects' 
                        && nonAdminProjectRTNames.indexOf(data.AcctSeed__Project__r.RecordType.DeveloperName) == -1
                        && taskTypeArray.indexOf(data.Project_Task_Type__c) != -1 
                        && ( !data.Parent_Project_Task__c || data.Name.indexOf('Language Training- Preparation') != -1)) {
                    return data;
                }else if(data.AcctSeed__Project__c == record.SelectedProject && 
                    nonAdminProjectRTNames.indexOf(data.AcctSeed__Project__r.RecordType.DeveloperName) != -1) {
                    
                    // For Linguist Support Project related task filtering
                    if(data.AcctSeed__Project__r.RecordType.DeveloperName != 'Linguist_Support_Projects') {
                        return data;
                    }else if(data.AcctSeed__Project__r.RecordType.DeveloperName == 'Linguist_Support_Projects'){
                         if(conAssignProjectTaskId && data.Id == conAssignProjectTaskId){
                             return data;
                         }else if(!conAssignProjectTaskId){
                             return data;
                         }
                    }
                }
            });
            
            var selectObj = {Id:'--select--',Name:'--select--'};
            filterData.unshift(selectObj);
            futureProTasks.unshift(selectObj);
            
            if(moment($scope.FromDate).isAfter(new Date()))
                record.projectTasks = futureProTasks;
            else
               record.projectTasks = filterData;
               
            record.SelectedProTask = record.projectTasks[0].Id;
            
            //populate project name based on selection
            var projectChoosen = _.filter(record.projects, function(data){ 
                if(data.Id == record.SelectedProject) {
                    return data;
                }
            });
            
            record.ProjectName = projectChoosen[0].Name;
            record.projectRTName = projectChoosen[0].RecordType.DeveloperName;
            
            if(projectChoosen[0].Training_Location__c) {
                record.locationId = projectChoosen[0].Training_Location__c;
                record.locationName = projectChoosen[0].Training_Location__r.Name;
                record.selectedLocation = {Id:record.locationId,Name:record.locationName};
            }
            
            record.PayRollItemList = [];
            record.payRollItem = '';
            
            // For charge Code edit reference
            $scope.changesMade = true;
        }
        
        // Query Existing Time Card day records
        $scope.timeCardDayQryFunction = function(dayRecord,type,positionVal) {
        
            document.getElementById("spinner").style.display = 'block';
            
            if(dayRecord.SelectedProject != '--select--' && dayRecord.SelectedProTask != '--select--'
                && $scope.selectedEmployee != '--select--' && dayRecord.payRollItem && dayRecord.locationId) {
                var key = dayRecord.SelectedProject+'-'+dayRecord.SelectedProTask+'-'+$scope.selectedEmployee+'-'+dayRecord.isBillable+'-'+dayRecord.payRollItem+'-'+dayRecord.locationId;
                
                if(UniqueKeySet.indexOf(key) == -1) {
                    UniqueKeySet.push(key);
                   
                    var dt1 = moment($scope.selectedWeekRange.split(' to ')[0],'MM-DD-YYYY').format('YYYY-MM-DD');
                    var dt2 = moment(dt1).add(6,'days').format('YYYY-MM-DD');
                    
                    Visualforce.remoting.Manager.invokeAction(
                        '{!$RemoteAction.DLS_Staff_Time_Entry_Ctrl.getExistingTimeCardRecords}',
                        dayRecord.SelectedProject,dayRecord.SelectedProTask,$scope.selectedEmployee,dt1,dt2,dayRecord.isBillable,dayRecord.payRollItem,
                        function(records, ev) {
                            if(ev.status) {
                                //console.log(':::::result::getExistingTimeCardRecords:::',records);
                                $timeout(function() {
                                
                                    if(records.length > 0) {
                                        dayRecord.sequenceNumber = records[0].sequenceNumber;
                                        dayRecord.timeCardLineId = records[0].timeCardLineId;
                                    }
                                    
                                    if(type != 'Not Include' && positionVal == 'Not change Position') {
                                        $scope.timeCardDayList.push(dayRecord);
                                        
                                    } else if(type != 'Not Include' && positionVal == 'Holiday') {
                                        $scope.timeCardDayList.splice(1,0,dayRecord);
                                        
                                    }else if(type != 'Not Include' && positionVal == 'Sick') {
                                        $scope.timeCardDayList.splice(2,0,dayRecord);
                                    
                                    }else if(type != 'Not Include' && positionVal == 'Vacation') {
                                        $scope.timeCardDayList.splice(3,0,dayRecord);
                                    }
                                    
                                    $scope.timeCardDayList = _.sortBy($scope.timeCardDayList,'sequenceNumber');
                                    
                                    document.getElementById("spinner").style.display = 'none';
                                });
                            } else {
                                console.log('::::ev:getExistingTimeCardRecords:::',ev);
                            }
                        },
                        {escape: true}
                    );
                  
                }else {
                    //console.log('billable',dayRecord.isBillable);
                    $scope.duplicateRecord = {};
                    
                    var msgpart = '';
                    var inverseMsg = '';
                    if(dayRecord.isBillable) {
                        msgpart = 'Billable';
                        inverseMsg = 'Non-billable';
                    } else { 
                        msgpart = 'Non-billable';
                        inverseMsg = 'Billable';
                    }
                    
                    var keyIndex = UniqueKeySet.indexOf(key);
                    var key2 = dayRecord.SelectedProject+'-'+dayRecord.SelectedProTask+'-'+$scope.selectedEmployee+'-'+!dayRecord.isBillable+'-'+dayRecord.payRollItem+'-'+dayRecord.selectedLocation.Id;
                    var keyIndex2 = UniqueKeySet.indexOf(key2);
                    
                    if(keyIndex != -1 && keyIndex2 != -1) {
                        $scope.cancelbtnDisplay = false;
                        $scope.DuplicateMsgValue = 'This combination of Project, Project Task, Contact, Location already exist.';
                    } else {
                        $scope.cancelbtnDisplay = true;
                        $scope.DuplicateMsgValue = 'This combination of Project, Project Task, Contact, Location and '+ msgpart+' already exist. Do you want '+inverseMsg+' for the same combination?';
                    }
                    
                    $scope.duplicateRecord = dayRecord;
                    
                    document.getElementById("spinner").style.display = 'none';
                    
                    //$scope.modalStateForDuplicate = 'slds-fade-in-open';
                    //$scope.modalBackdropStateForDuplicate = 'slds-modal-backdrop--open';
                    
                }
            }
        }
        
        //Resolve Responses
        function resolveResponse(response, ev, def) {
            if(ev.status) {
                def.resolve(response);
            } else {
                def.reject(ev);
            }
        }
        
        function millisecondToString(millisecond) {
            var date = new Date(millisecond);            
            date.setTime(date.getTime() + date.getTimezoneOffset()*1000*60); // To fix the time zone issue.from 2012/6/31 to 2012/7/1 
            var day = date.getDate();
            var month = date.getMonth() + 1;
            if(day < 10) {
                day = '0' + day;
            }
            if(month < 10) {
                month = '0' + month;
            }
            return date.getFullYear() + '-' +month + '-' + day;
        }
        
        function millisecondToDateTimeString(millisecond) {
            
            return moment.tz(millisecond, $scope.UserTimezoneValue).format('YYYY-MM-DD h:mm:ss a');
        }
        
        
        $scope.addRow = function() {
            $scope.NewlyAddedRec = {};
            //var dayIndex = $scope.timeCardDayList.length;
            var Obj = {
               
               Hours1:'',
               Hours2:'',
               Hours3:'',
               Hours4:'',
               Hours5:'',
               Hours6:'',
               Hours7:'',
               Day1:$scope.DaysList[0],
               Day2:$scope.DaysList[1],
               Day3:$scope.DaysList[2],
               Day4:$scope.DaysList[3],
               Day5:$scope.DaysList[4],
               Day6:$scope.DaysList[5],
               Day7:$scope.DaysList[6],
               Hrs1Error:'',
               Hrs2Error:'',
               Hrs3Error:'',
               Hrs4Error:'',
               Hrs5Error:'',
               Hrs6Error:'',
               Hrs7Error:'',
               Flag:false,
               isDisabled:true,
               isBillable:false,
               isVisible:true,
               //PayRollItemList: $scope.PayRollItems,
               holidayBoolean: false,
               hidebillableSection: false
            };
            
            
            var dt1 = moment($scope.selectedWeekRange.split(' to ')[0],'MM-DD-YYYY').format('YYYY-MM-DD');
            var dateRange = moment(dt1).subtract(14,'days').format('YYYY-MM-DD');
             
            console.log('::::::::dateRange::::::',new Date(dateRange).getTime());
            var filterData = _.filter($scope.WholeProjectList, function(data){ 
                if(data.End_Date__c >= new Date(dateRange).getTime()|| data.Id == $scope.HomeDeprtProId) {
                    return data;
                }
            });
            
            var selectObj = {Id:'--Select--',Name:'--Select--'};
            filterData.unshift(selectObj);
            
            if(filterData.length > 0)
                Obj.projects = filterData;
            
            if(Obj.projects.length > 0)
                Obj.SelectedProject = Obj.projects[0].Id;
            
            $scope.NewlyAddedRec = Obj;
            
            $scope.changesMade = false;
            
            $scope.DuplicateMsgValue = '';
            
            console.log(':::::$scope.NewlyAddedRec:::',$scope.NewlyAddedRec);
            
            $scope.modalStateForAddBtn = 'slds-fade-in-open';
            $scope.modalBackdropStateForAddBtn = 'slds-modal-backdrop--open';
        }
        
        $scope.OkayClickForAddBtn = function() {
            if($scope.changesMade) {
                console.log('::::::::::$scope.NewlyAddedRec.locationId:::::::',$scope.NewlyAddedRec.locationId);
                if($scope.NewlyAddedRec.selectedLocation) {
                    
                     CostRateValidation();
                    
                    $scope.UpdateBillableValue($scope.NewlyAddedRec);
                    
                    if(!$scope.DuplicateMsgValue) {
                    
                        if($scope.NewlyAddedRec.SelectedProject != '--select--' 
                            && $scope.NewlyAddedRec.SelectedProject != '--select--' && $scope.NewlyAddedRec.payRollItem 
                            && $scope.NewlyAddedRec.selectedLocation.Id){
                        
                            $scope.NewlyAddedRec.showDetails = true;
                            
                            $scope.NewlyAddedRec.locationId = $scope.NewlyAddedRec.selectedLocation.Id;
                            $scope.NewlyAddedRec.locationName = $scope.NewlyAddedRec.selectedLocation.Name;
                            
                            var billableValue = '';
                            if($scope.NewlyAddedRec.isBillable)
                                billableValue = 'Billable';
                            else
                                billableValue = 'Non-billable';
                            
                            var location = '';
                            if($scope.NewlyAddedRec.locationName)
                                location = $scope.NewlyAddedRec.locationName;
                            else
                                location = 'N/A';
                            
                            $scope.NewlyAddedRec.project_Task_Payroll_Billable_Location = $scope.NewlyAddedRec.ProjectName+' / '+$scope.NewlyAddedRec.TaskName+' / '+$scope.NewlyAddedRec.payRollItem+' / '+billableValue+' / '+location;
                            
                            // For Charge code edit operation
                            // For unposting previous charge code related day entries which are already saved in backend
                            unpostEditedRowValues();
                            
                            if(!$scope.oldRowselected) {
                                
                                var lastSequenceNumber;
                            
                                console.log('::::::$scope.timeCardDayList:::',$scope.timeCardDayList);
                                
                                if($scope.timeCardDayList.length > 0) {
                                    lastSequenceNumber = $scope.timeCardDayList[$scope.timeCardDayList.length - 1].sequenceNumber;
                                    console.log('::::::::lastSequenceNumber::if:::',lastSequenceNumber);
                                } else {
                                    if($scope.timeCardDayList.length != 0)
                                        lastSequenceNumber = $scope.timeCardDayList[0].sequenceNumber;
                                    else
                                        lastSequenceNumber = 0;
                                    console.log('::::::::lastSequenceNumber:else::::',lastSequenceNumber);
                                }
                                
                                $scope.NewlyAddedRec.sequenceNumber = lastSequenceNumber + 1;
                                
                                console.log('::::::::$scope.NewlyAddedRec.sequenceNumber:::::',$scope.NewlyAddedRec.sequenceNumber);
                                $scope.timeCardDayList.push($scope.NewlyAddedRec);
                                
                                if($scope.timeCardDayList.length > 0) {
                                    $scope.noRecordFound = false;
                                } else {
                                    $scope.noRecordFound = true;
                                }
                                
                                $scope.timeCardDayQryFunction($scope.NewlyAddedRec,'Not Include','Not change Position');
                            }else {
                                $scope.timeCardDayList[$scope.timeCardDayList.indexOf($scope.oldRowselected)] = $scope.NewlyAddedRec;
                            }
                            
                            if($scope.oldRowselected)
                                $scope.oldRowselected.isVisible = false;
                            
                            $scope.modalStateForAddBtn = '';
                            $scope.modalBackdropStateForAddBtn = '';
                            
                            $scope.locationError = '';
                            
                            // Capture newly added rows changes if already time entry exis
                            
                            if($scope.NewlyAddedRec.Hours1 != null)
                                $scope.captureUpdation($scope.NewlyAddedRec,$scope.NewlyAddedRec.Hours1,$scope.NewlyAddedRec.Hrs1Day1Id,$scope.NewlyAddedRec.status1);
                            
                            if($scope.NewlyAddedRec.Hours2 != null)
                                $scope.captureUpdation($scope.NewlyAddedRec,$scope.NewlyAddedRec.Hours2,$scope.NewlyAddedRec.Hrs2Day2Id,$scope.NewlyAddedRec.status2);
                            
                            if($scope.NewlyAddedRec.Hours3 != null)
                                $scope.captureUpdation($scope.NewlyAddedRec,$scope.NewlyAddedRec.Hours3,$scope.NewlyAddedRec.Hrs3Day3Id,$scope.NewlyAddedRec.status3);
                            
                            if($scope.NewlyAddedRec.Hours4 != null)
                                $scope.captureUpdation($scope.NewlyAddedRec,$scope.NewlyAddedRec.Hours4,$scope.NewlyAddedRec.Hrs4Day4Id,$scope.NewlyAddedRec.status4);
                            
                            if($scope.NewlyAddedRec.Hours5 != null)
                                $scope.captureUpdation($scope.NewlyAddedRec,$scope.NewlyAddedRec.Hours5,$scope.NewlyAddedRec.Hrs5Day5Id,$scope.NewlyAddedRec.status5);
                            
                            if($scope.NewlyAddedRec.Hours6 != null)
                                $scope.captureUpdation($scope.NewlyAddedRec,$scope.NewlyAddedRec.Hours6,$scope.NewlyAddedRec.Hrs6Day6Id,$scope.NewlyAddedRec.status6);
                            
                            if($scope.NewlyAddedRec.Hours7 != null)
                                $scope.captureUpdation($scope.NewlyAddedRec,$scope.NewlyAddedRec.Hours7,$scope.NewlyAddedRec.Hrs7Day7Id,$scope.NewlyAddedRec.status7);
                            
                        }else {
                            
                            if(!$scope.NewlyAddedRec.payRollItem)
                                $scope.DuplicateMsgValue = 'Please contact your HR to create corresponding Cost Rate record to proceed further.';
                            
                            //$scope.modalStateForAddBtn = '';
                            //$scope.modalBackdropStateForAddBtn = '';
                        }
                    }
                }else {
                    console.log('LL::::::::::::L:');
                    $scope.locationError = 'slds-has-error';
                }
            }else {
                $scope.modalStateForAddBtn = '';
                $scope.modalBackdropStateForAddBtn = '';
            }
        }
        
        $scope.cancelForAddBtnModel = function() {
            if($scope.oldRowselected)
                $scope.oldRowselected.isVisible = true;
                
            $scope.modalStateForAddBtn = '';
            $scope.modalBackdropStateForAddBtn = '';
            $scope.DuplicateMsgValue = '';
            $scope.locationError = '';
        }
        
        // Cost rate validation for selected contact
       function CostRateValidation() {
           if(!$scope.NewlyAddedRec.costRateId){
                $scope.DuplicateMsgValue = 'Please contact your HR to create corresponding Cost Rate record to proceed further.';
           }
       }
       
        function unpostEditedRowValues() {
            if($scope.oldRowselected && $scope.oldRowselected.Hrs1Day1Id) {
                if($scope.dayIdsForSaveCheck.indexOf($scope.oldRowselected.Hrs1Day1Id) == -1)
                   $scope.dayIdsForSaveCheck.push($scope.oldRowselected.Hrs1Day1Id);
                   
                $scope.oldRowselected.status1 = 'Unposted'; 
            }
            
            if($scope.oldRowselected && $scope.oldRowselected.Hrs2Day2Id) {
                if($scope.dayIdsForSaveCheck.indexOf($scope.oldRowselected.Hrs2Day2Id) == -1)
                   $scope.dayIdsForSaveCheck.push($scope.oldRowselected.Hrs2Day2Id);
                   
                $scope.oldRowselected.status2 = 'Unposted'; 
            }
            
            if($scope.oldRowselected && $scope.oldRowselected.Hrs3Day3Id) {
                if($scope.dayIdsForSaveCheck.indexOf($scope.oldRowselected.Hrs3Day3Id) == -1)
                   $scope.dayIdsForSaveCheck.push($scope.oldRowselected.Hrs3Day3Id);
                   
                $scope.oldRowselected.status3 = 'Unposted'; 
            }
            
            if($scope.oldRowselected && $scope.oldRowselected.Hrs4Day4Id) {
                if($scope.dayIdsForSaveCheck.indexOf($scope.oldRowselected.Hrs4Day4Id) == -1)
                   $scope.dayIdsForSaveCheck.push($scope.oldRowselected.Hrs4Day4Id);
                   
                $scope.oldRowselected.status4 = 'Unposted'; 
            }
            
            if($scope.oldRowselected && $scope.oldRowselected.Hrs5Day5Id) {
                if($scope.dayIdsForSaveCheck.indexOf($scope.oldRowselected.Hrs5Day5Id) == -1)
                   $scope.dayIdsForSaveCheck.push($scope.oldRowselected.Hrs5Day5Id);
                   
                $scope.oldRowselected.status5 = 'Unposted'; 
            }
            
            if($scope.oldRowselected && $scope.oldRowselected.Hrs6Day6Id) {
                if($scope.dayIdsForSaveCheck.indexOf($scope.oldRowselected.Hrs6Day6Id) == -1)
                   $scope.dayIdsForSaveCheck.push($scope.oldRowselected.Hrs6Day6Id);
                   
                $scope.oldRowselected.status6 = 'Unposted'; 
            }
            if($scope.oldRowselected && $scope.oldRowselected.Hrs7Day7Id) {
                if($scope.dayIdsForSaveCheck.indexOf($scope.oldRowselected.Hrs7Day7Id) == -1)
                   $scope.dayIdsForSaveCheck.push($scope.oldRowselected.Hrs7Day7Id);
                   
                $scope.oldRowselected.status7 = 'Unposted'; 
            }
                    
        }
        
        $scope.removeRow = function(record) {
            //Remove the records from display list
            if(record) {
                var key = record.SelectedProject+'-'+record.SelectedProTask+'-'+$scope.selectedEmployee+'-'+record.isBillable+'-'+record.payRollItem+'-'+record.selectedLocation.Id;   
                if(UniqueKeySet.indexOf(key) != -1) {
                    var index = UniqueKeySet.indexOf(key);
                    UniqueKeySet.splice(index,1);
                }
                
                if($scope.PreviousWeekMap[key]){
                    var obj = $scope.PreviousWeekMap[key];
                    console.log('::::obj.timeCardLineId::::::',obj.timeCardLineId);
                    
                    if($scope.LineIdsToUpdate.indexOf(obj.timeCardLineId) == -1) {
                        $scope.LineIdsToUpdate.push(obj.timeCardLineId);
                        $scope.lineRecordsForUpdate.push({Id:obj.timeCardLineId,Display_in_Future_Weeks__c:false});
                    }
                }
                
                var indexofRemovingRec = $scope.timeCardDayList.indexOf(record);
                
                for(var i = indexofRemovingRec + 1; i < $scope.timeCardDayList.length;i++) {
                    $scope.timeCardDayList[i].sequenceNumber -= 1;
                }
                
                $scope.timeCardDayList.splice($scope.timeCardDayList.indexOf(record), 1);
                
            }
        }
        
        // Charge code edit model open 
        
        // Display charge code edit icon logic
        $scope.chargeCodeEditIcon = function(record) {
            
            if(!record.isHomeDepartment && !booleanForbeforelastWeek) {
                
                if(record.status1 == 'Submitted' || record.status2 == 'Submitted' || record.status3 == 'Submitted'
                    || record.status4 == 'Submitted' || record.status5 == 'Submitted' || record.status6 == 'Submitted'
                    || record.status7 == 'Submitted') {
                    return false;
                }else if((record.status1 == 'Approved' || record.status2 == 'Approved' || record.status3 == 'Approved'
                    || record.status4 == 'Approved' || record.status5 == 'Approved' || record.status6 == 'Approved'
                    || record.status7 == 'Approved') 
                    
                    || (record.status1 == 'Admin Approved' || record.status2 == 'Admin Approved' || record.status3 == 'Admin Approved'
                    || record.status4 == 'Admin Approved' || record.status5 == 'Admin Approved' || record.status6 == 'Admin Approved'
                    || record.status7 == 'Admin Approved')) {
                    return false;
                }else {
                    return true;
                }
            }else {
                return false;
            }
        
        }
        
        $scope.openChargeCodeEdit = function(record) {
            
            console.log('::::openForCharge:::::::::',record);
            
            $scope.NewlyAddedRec = {};
            
            $scope.NewlyAddedRec = angular.copy(record);
            
            $scope.NewlyAddedRec.Hrs1Day1Id = null;
            $scope.NewlyAddedRec.Hrs2Day2Id = null;
            $scope.NewlyAddedRec.Hrs3Day3Id = null;
            $scope.NewlyAddedRec.Hrs4Day4Id = null;
            $scope.NewlyAddedRec.Hrs5Day5Id = null;
            $scope.NewlyAddedRec.Hrs6Day6Id = null;
            $scope.NewlyAddedRec.Hrs7Day7Id = null;
            $scope.NewlyAddedRec.timeCardLineId = null;
            $scope.NewlyAddedRec.isReadeOnlyHrs1 = false;
            $scope.NewlyAddedRec.isReadeOnlyHrs2 = false;
            $scope.NewlyAddedRec.isReadeOnlyHrs3 = false;
            $scope.NewlyAddedRec.isReadeOnlyHrs4 = false;
            $scope.NewlyAddedRec.isReadeOnlyHrs5 = false;
            $scope.NewlyAddedRec.isReadeOnlyHrs6 = false;
            $scope.NewlyAddedRec.isReadeOnlyHrs7 = false;
            
            $scope.NewlyAddedRec.selectedLocation = {Id:record.locationId,Name:record.locationName};
            
            $scope.oldRowselected = record;
            //$scope.oldRowselected.isVisible = false;
            
            $scope.NewlyAddedRec.disableBillable = false;
            $scope.NewlyAddedRec.disablePayRoll = false;
            
            $scope.changesMade = false;
            
            $scope.modalStateForAddBtn = 'slds-fade-in-open';
            $scope.modalBackdropStateForAddBtn = 'slds-modal-backdrop--open';
        }
        
        // Capture location value changes
        $scope.locationValueChanges = function(record) {
            if(record) {
                record.locationId = record.selectedLocation.Id;
                record.locationName = record.selectedLocation.Name;
            }
            $scope.changesMade = true;
        }
        
        
        // save function
        $scope.SaveCallingFunction = function(actionType) {
            document.getElementById("spinner").style.display = 'block';
            $scope.InnerClassArray = [];
            
            $scope.chargeCodeToDelete = [];
            $scope.actionType = actionType;
            
            console.log(':::::::$scope.timeCardDayList::::::::',$scope.timeCardDayList);
            
            var taskNameArray = ['ADMINISTRATIVE','Fringe-Holiday','Fringe-Sick','Fringe-Vacation'];
            var existingTaskName = [];
            
            if($scope.timeCardDayList.length > 0) {
            
                for(var i = 0;i < $scope.timeCardDayList.length;i++) {
                    console.log(':::$scope.timeCardDayList[i]:::::',$scope.timeCardDayList[i]);
                    if($scope.timeCardDayList[i].SelectedProject != '--select--' && $scope.timeCardDayList[i].SelectedProTask 
                        && $scope.timeCardDayList[i].SelectedProTask != '--select--' && $scope.selectedEmployee != '--select--' 
                        && $scope.timeCardDayList[i].payRollItem) {
                        
                        $scope.timeCardDayList[i].isCreatable = true; 
                        
                        if(
                            $scope.timeCardDayList[i].Hours1 || $scope.timeCardDayList[i].Hours2 
                            || $scope.timeCardDayList[i].Hours3 || $scope.timeCardDayList[i].Hours4 
                            || $scope.timeCardDayList[i].Hours5 || $scope.timeCardDayList[i].Hours6 
                            || $scope.timeCardDayList[i].Hours7
                        ) {
                            
                            $scope.timeCardDayList[i].SelectedInstructor = $scope.selectedEmployee;
                            
                            if(!$scope.timeCardDayList[i].hrs1ErrMsg && !$scope.timeCardDayList[i].hrs2ErrMsg
                                && !$scope.timeCardDayList[i].hrs3ErrMsg && !$scope.timeCardDayList[i].hrs4ErrMsg
                                && !$scope.timeCardDayList[i].hrs5ErrMsg && !$scope.timeCardDayList[i].hrs6ErrMsg
                                && !$scope.timeCardDayList[i].hrs7ErrMsg ) {
                            
                                existingTaskName.push($scope.timeCardDayList[i].TaskName);
                                $scope.InnerClassArray.push($scope.timeCardDayList[i]); 
                                
                            }else {
                                
                                if(!$scope.timeCardDayList[i].hrs1ErrMsg == '')
                                    $scope.timeCardDayList[i].Hrs1Error = 'selectErrorClass';
                                if(!$scope.timeCardDayList[i].hrs2ErrMsg == '')
                                    $scope.timeCardDayList[i].Hrs2Error = 'selectErrorClass';
                                if(!$scope.timeCardDayList[i].hrs3ErrMsg == '')
                                    $scope.timeCardDayList[i].Hrs3Error = 'selectErrorClass';
                                if(!$scope.timeCardDayList[i].hrs4ErrMsg == '')
                                    $scope.timeCardDayList[i].Hrs4Error = 'selectErrorClass';
                                if(!$scope.timeCardDayList[i].hrs5ErrMsg == '')
                                    $scope.timeCardDayList[i].Hrs5Error = 'selectErrorClass';
                                if(!$scope.timeCardDayList[i].hrs6ErrMsg == '')
                                    $scope.timeCardDayList[i].Hrs6Error = 'selectErrorClass';
                                if(!$scope.timeCardDayList[i].hrs7ErrMsg == '')
                                    $scope.timeCardDayList[i].Hrs7Error = 'selectErrorClass';
                                
                            }
                        } else {
                            
                            if(existingTaskName.indexOf($scope.timeCardDayList[i].TaskName) != -1)
                                $scope.timeCardDayList[i].isCreatable = false;
                                
                            if(taskNameArray.indexOf($scope.timeCardDayList[i].TaskName) == -1){    // Check if other project with tasks have empty rows & display message window
                                $scope.timeCardDayList[i].isCreatable = false;
                                $scope.chargeCodeToDelete.push($scope.timeCardDayList[i].project_Task_Payroll_Billable_Location);
                            }
                        }    
                    }else {
                        console.log('Enter else');
                        console.log(':::$scope.timeCardDayList[i]:::::',$scope.timeCardDayList[i]);
                        if($scope.timeCardDayList[i].SelectedProject == '--select--')
                            $scope.projectErrorMsg = 'selectErrorClass';
                        if($scope.timeCardDayList[i].SelectedProTask == '--select--')
                            $scope.TaskErrorMsg = 'selectErrorClass';
                            
                        if(!$scope.timeCardDayList[i].payRollItem)
                            $scope.payRollErrorMsg = 'selectErrorClass';
                    }
                }
                console.log(':::::::$scope.InnerClassArray::::::',$scope.InnerClassArray);
                //console.log(':::::::lineRecordsForUpdate::::::',$scope.lineRecordsForUpdate);
                
            }
            
            console.log('::::::::$scope.chargeCodeToDelete::::',$scope.chargeCodeToDelete);
            if($scope.chargeCodeToDelete.length > 0) {
            
                document.getElementById("spinner").style.display = 'none';
                $scope.modalStateForDeletionMsg = 'slds-fade-in-open';
                $scope.modalBackdropStateForDeletionMsg = 'slds-modal-backdrop--open';
            }else {
            
                if($scope.InnerClassArray.length > 0)
                    $scope.RemoteActionCallingFunction($scope.InnerClassArray,actionType);
                else
                    document.getElementById("spinner").style.display = 'none';
            }
        }
        
        $scope.OkayForDeletionMsgDisplay = function() {
        
            $scope.modalStateForDeletionMsg = '';
            $scope.modalBackdropStateForDeletionMsg = '';
            
            document.getElementById("spinner").style.display = 'block';
            
            var filteredRecords = _.filter($scope.timeCardDayList,function(data){ 
                return data.isCreatable;
            });
            
            console.log('::::::::filteredRecords:::::',filteredRecords);
            
            var finalRecList = [];
            
            for(var i = 0;i < filteredRecords.length;i++) {
                filteredRecords[i].sequenceNumber =  i + 1;
                
                if(filteredRecords[i].Hours1 || filteredRecords[i].Hours2 
                            || filteredRecords[i].Hours3 || filteredRecords[i].Hours4 
                            || filteredRecords[i].Hours5 || filteredRecords[i].Hours6 
                            || filteredRecords[i].Hours7
                ) {
                            
                    filteredRecords[i].SelectedInstructor = $scope.selectedEmployee;
                    
                    if(!filteredRecords[i].hrs1ErrMsg && !filteredRecords[i].hrs2ErrMsg
                        && !filteredRecords[i].hrs3ErrMsg && !filteredRecords[i].hrs4ErrMsg
                        && !filteredRecords[i].hrs5ErrMsg && !filteredRecords[i].hrs6ErrMsg
                        && !filteredRecords[i].hrs7ErrMsg ) {
                        
                        finalRecList.push(filteredRecords[i]);
                    }
                }
            }
            
            //console.log(':::::::::finalRecList::::::::::',finalRecList);
            //console.log(':::::::::$scope.InnerClassArray::::::::::',$scope.InnerClassArray);
            
            if(finalRecList.length > 0)
                $scope.RemoteActionCallingFunction(finalRecList,$scope.actionType);
            else
                document.getElementById("spinner").style.display = 'none';
        }
        
        $scope.RemoteActionCallingFunction = function(cardDayArray,actionType) {
            
            console.log(':::::::cardDayArray::::',cardDayArray);        
                        
            for(var i = 0;i < cardDayArray.length;i++){     
                delete cardDayArray[i].projects;        
                delete cardDayArray[i].projectTasks;        
                delete cardDayArray[i].PayRollItemList;     
            }       
            console.log(':::::::length::::::::::::',JSON.stringify(cardDayArray).length);
            
            document.getElementById("spinner").style.display = 'block';
            Visualforce.remoting.Manager.invokeAction(
                '{!$RemoteAction.DLS_Staff_Time_Entry_Ctrl.timeCardDayCreation}',
                JSON.stringify(cardDayArray),$scope.DaysList[0],$scope.DaysList[6],actionType,$scope.dayIdsForSaveCheck,$scope.lineRecordsForUpdate,
                function(records, ev) {
                    if(ev.status) {
                        document.getElementById("spinner").style.display = 'none'; 
                        $scope.errorAccoured = false;
                        
                        $scope.modelTitle = 'Success';
                        if(actionType == 'FromSubmit') {
                            $scope.errorMessageforAllSave = 'The time entries have successfully been submitted to your supervisor for approval.';
                        } else if(actionType ==  'FromRecall') {
                            $scope.errorMessageforAllSave = 'Recalled all time entries Successfully.';
                        } else if(actionType == 'FromSave') {
                            $scope.errorMessageforAllSave = 'Time entries created Successfully.';
                        }
                        
                        $scope.dayIdsForSaveCheck = [];
                        
                        $scope.modalStateForError = 'slds-fade-in-open';
                        $scope.modalBackdropStateForError = 'slds-modal-backdrop--open';
                        $scope.$apply();
                    } else {
                        $scope.errorAccoured = true;
                        console.log('::::ev::::',ev);
                        document.getElementById("spinner").style.display = 'none';
                        $scope.modelTitle = 'Error';
                        $scope.errorMessageforAllSave = ev.message;
                        $scope.modalStateForError = 'slds-fade-in-open';
                        $scope.modalBackdropStateForError = 'slds-modal-backdrop--open';
                        $scope.$apply();
                    }
                },
                {escape: true}
            ); 
        } 
        
        $scope.OkayForError =  function() {
            
            $scope.modalStateForError = '';
            $scope.modalBackdropStateForError = '';
            
            var isSitepage = false;
            if('{!$Site.Name}' != '') {
                isSitepage = true;
            }
            
            // Modified the below code to for lightning staff community usage
            // By NS on Nov 3 2018
            
            var uiTheme = '{!$User.UIThemeDisplayed}';
            
            //window.location.href = "/home/home.jsp";
            if(!isSitepage) {
                if(!$scope.errorAccoured && !$scope.fromOkayOnConfirmation) {
                    //window.location.href = '/apex/DLS_Staff_Time_Entry_Page';
                    window.location.href = '/apex/DLS_Staff_Time_Entry_Page?WeekRange='+$scope.selectedWeekRange;
                }
            }else {
                if(!$scope.errorAccoured && !$scope.fromOkayOnConfirmation) {
                    if(uiTheme == 'Theme4d' || uiTheme == 'Theme4t'){
                        //var urlPrefix = '{!$Label.Community_Site_Prefix}';
                        sforce.one.navigateToURL('/staff/apex/Staff_Time_Entry_Page_SC?WeekRange='+$scope.selectedWeekRange);
                    }else {
                        window.location.href = '/staff/apex/Staff_Time_Entry_Page_SC?WeekRange='+$scope.selectedWeekRange;
                    }
                }
            }
        }  
        
        $scope.OkayForDuplicates = function() {
        
            if($scope.cancelbtnDisplay && $scope.duplicateRecord) {
                var key = $scope.duplicateRecord.SelectedProject+'-'+$scope.duplicateRecord.SelectedProTask+'-'+$scope.selectedEmployee+'-'+$scope.duplicateRecord.isBillable+'-'+$scope.duplicateRecord.payRollItem;
                var Index = $scope.timeCardDayList.indexOf($scope.duplicateRecord);
                $scope.timeCardDayList[Index].isBillable = !$scope.duplicateRecord.isBillable;
                
                //$scope.timeCardDayQryFunction($scope.timeCardDayList[Index]);
                
            }else if(!$scope.BillapleFlipDone && $scope.duplicateRecord && Object.keys($scope.duplicateRecord).length > 0){
                var key = $scope.duplicateRecord.SelectedProject+'-'+$scope.duplicateRecord.SelectedProTask+'-'+$scope.selectedEmployee+'-'+$scope.duplicateRecord.isBillable+'-'+$scope.duplicateRecord.payRollItem;
           
                var Index = $scope.timeCardDayList.indexOf($scope.duplicateRecord);
                $scope.timeCardDayList.splice(Index,1);
            }
            
            $scope.modalStateForDuplicate = '';
            $scope.modalBackdropStateForDuplicate = '';
        }
        
        $scope.NOClickForDuplicates = function() {
            
            var key = $scope.duplicateRecord.SelectedProject+'-'+$scope.duplicateRecord.SelectedProTask+'-'+$scope.selectedEmployee+'-'+$scope.duplicateRecord.isBillable+'-'+$scope.duplicateRecord.payRollItem+'-'+$scope.duplicateRecord.selectedLocation.Id;
           
            var Index = $scope.timeCardDayList.indexOf($scope.duplicateRecord);
            $scope.timeCardDayList.splice(Index,1);
            //var keyIndex = UniqueKeySet.indexOf(key);
            //UniqueKeySet.splice(keyIndex,1);
            
            $scope.modalStateForDuplicate = '';
            $scope.modalBackdropStateForDuplicate = '';
        }
        
        $scope.totalHrsCalculation = function(record) {
        
            var hrs = 0;
            if(record.Hours1) {
                //console.log('hrs 1');
                if(record.hasOwnProperty('status1') && record.status1 != 'Unposted')
                    hrs = parseFloat(record.Hours1) + parseFloat(hrs);
                else if(!record.hasOwnProperty('status1'))
                    hrs = parseFloat(record.Hours1) + parseFloat(hrs);
            }
            
            if(record.Hours2) {
                //console.log('hrs 2');
                if(record.hasOwnProperty('status2') && record.status2 != 'Unposted')
                    hrs = parseFloat(record.Hours2) + parseFloat(hrs);
                else if(!record.hasOwnProperty('status2'))
                    hrs = parseFloat(record.Hours2) + parseFloat(hrs);
            }
            
            if(record.Hours3) {
                //console.log('hrs 3');
                if(record.hasOwnProperty('status3') && record.status3 != 'Unposted')
                    hrs = parseFloat(record.Hours3) + parseFloat(hrs);
                else if(!record.hasOwnProperty('status3'))
                    hrs = parseFloat(record.Hours3) + parseFloat(hrs);
            }
            
            if(record.Hours4) {
                //console.log('hrs 4');
                if(record.hasOwnProperty('status4') && record.status4 != 'Unposted')
                    hrs = parseFloat(record.Hours4) + parseFloat(hrs);
                else if(!record.hasOwnProperty('status4'))
                    hrs = parseFloat(record.Hours4) + parseFloat(hrs);
            }
            
            if(record.Hours5) {
                //console.log('hrs 5');
                if(record.hasOwnProperty('status5') && record.status5 != 'Unposted')
                    hrs = parseFloat(record.Hours5) + parseFloat(hrs);
                else if(!record.hasOwnProperty('status5'))
                    hrs = parseFloat(record.Hours5) + parseFloat(hrs);
            }
            
            if(record.Hours6) {
                //console.log('hrs 6');
                if(record.hasOwnProperty('status6') && record.status6 != 'Unposted')
                    hrs = parseFloat(record.Hours6) + parseFloat(hrs);
                else if(!record.hasOwnProperty('status6'))
                    hrs = parseFloat(record.Hours6) + parseFloat(hrs);
            }
            
            if(record.Hours7) {
                //console.log('hrs 7');
                if(record.hasOwnProperty('status7') && record.status7 != 'Unposted')
                    hrs = parseFloat(record.Hours7) + parseFloat(hrs);
                else if(!record.hasOwnProperty('status7'))
                    hrs = parseFloat(record.Hours7) + parseFloat(hrs);
            }
            //console.log('::::hrs:::::',hrs);
            record.TotalHours = hrs.toFixed(2);
            
            //console.log('::::record:::::',record);
        }
        
        $scope.hrsValidation = function(data,hrsType) {
          
            if(hrsType == "Hours1") {
                var hour = (data.Hours1 * 100) % 100;
                if(!(hour == 25 || hour == 50 || hour == 75 || hour == 0)){
                    console.log('invalid format');
                    data.hrs1ErrMsg  = 'Allowed decimal values are 00, 25, 50, 75';
                }else {
                    console.log('correct format');
                    data.hrs1ErrMsg  = '';
                    data.Hrs1Error = '';
                }
            }else if(hrsType == "Hours2") {
                var hour = (data.Hours2 * 100) % 100;
                if(!(hour == 25 || hour == 50 || hour == 75 || hour == 0)){
                    console.log('invalid format');
                    data.hrs2ErrMsg  = 'Allowed decimal values are 00, 25, 50, 75';
                }else {
                    console.log('correct format');
                    data.hrs2ErrMsg  = '';
                    data.Hrs2Error = '';
                }
            }else if(hrsType == "Hours3") {
                var hour = (data.Hours3 * 100) % 100;
                if(!(hour == 25 || hour == 50 || hour == 75 || hour == 0)){
                    console.log('invalid format');
                    data.hrs3ErrMsg  = 'Allowed decimal values are 00, 25, 50, 75';
                }else {
                    console.log('correct format');
                    data.hrs3ErrMsg  = '';
                    data.Hrs3Error = '';
                }
            }else if(hrsType == "Hours4") {
                var hour = (data.Hours4 * 100) % 100;
                if(!(hour == 25 || hour == 50 || hour == 75 || hour == 0)){
                    console.log('invalid format');
                    data.hrs4ErrMsg  = 'Allowed decimal values are 00, 25, 50, 75';
                }else {
                    console.log('correct format');
                    data.hrs4ErrMsg  = '';
                    data.Hrs4Error = '';
                }
            }else if(hrsType == "Hours5") {
                var hour = (data.Hours5 * 100) % 100;
                if(!(hour == 25 || hour == 50 || hour == 75 || hour == 0)){
                    console.log('invalid format');
                    data.hrs5ErrMsg  = 'Allowed decimal values are 00, 25, 50, 75';
                }else {
                    console.log('correct format');
                    data.hrs5ErrMsg  = '';
                    data.Hrs5Error = '';
                }
            }else if(hrsType == "Hours6") {
                var hour = (data.Hours6 * 100) % 100;
                if(!(hour == 25 || hour == 50 || hour == 75 || hour == 0)){
                    console.log('invalid format');
                    data.hrs6ErrMsg  = 'Allowed decimal values are 00, 25, 50, 75';
                }else {
                    console.log('correct format');
                    data.hrs6ErrMsg  = '';
                    data.Hrs6Error = '';
                }
            }else if(hrsType == "Hours7") {
                var hour = (data.Hours7 * 100) % 100;
                if(!(hour == 25 || hour == 50 || hour == 75 || hour == 0)){
                    console.log('invalid format');
                    data.hrs7ErrMsg  = 'Allowed decimal values are 00, 25, 50, 75';
                }else {
                    console.log('correct format');
                    data.hrs7ErrMsg  = '';
                    data.Hrs7Error = '';
                }
            }
            
            // Added this code to disable payroll item when any one of hrs records entered
            
            if(data.Hours1 || data.Hours2 || data.Hours3 
                || data.Hours4 || data.Hours5 || data.Hours6 
                || data.Hours7) {
                
                data.disablePayRoll =  true;
            }else if(data.TaskName.indexOf('Fringe-Other Pay') != -1){
                data.disablePayRoll =  false;
            }
        }
        
        function CalculateWeekRangeDate(weekRange) {
        
            $scope.DaysList = [];
            $scope.dateLableArray = [];
            
            console.log(':::weekRange:::::',weekRange);
            var dt1 = moment(weekRange.split(' to ')[0],'MM-DD-YYYY').format('YYYY-MM-DD');
            var dt2 = moment(dt1).add(6,'days').format('YYYY-MM-DD');
            
            var WeekStart = moment(dt1);
            var WeekEnd = moment(WeekStart).add(6,'days').format('YYYY-MM-DD');
            
            while(WeekStart.isBefore(WeekEnd) || WeekStart.isSame(WeekEnd)) {
                $scope.DaysList.push(WeekStart.format('YYYY-MM-DD'));
                $scope.dateLableArray.push(WeekStart.format('MM/DD/YY'));
                WeekStart.add(1, 'days').format('YYYY-MM-DD');
            }
        }
        
        //Calculate sum of values
        
       $scope.getHoursSumValues = function(records,Hrskey,dateKey,dateValue,statustype) {
            var sum = 0;
            for(var i = 0; i < records.length; i++) {
                if(records[i][dateKey] == dateValue && records[i][Hrskey] && records[i][statustype] != 'Unposted') {
                    sum = sum + parseFloat(records[i][Hrskey]);
                }
            }
            return ((sum * 100) / 100).toFixed(2);
        }
    
       $scope.totalhours = function() {
           
           $scope.OverAllHrs = 0;
           
           var sum = 0;
           var overHrs = 0;
           
           for(var i = 0; i < $scope.timeCardDayList.length; i++) {
               if($scope.timeCardDayList[i].TotalHours)
                   sum = sum + parseFloat($scope.timeCardDayList[i].TotalHours);
               
               // the below code to calculate over all hrs 
               if($scope.timeCardDayList[i].Hours1 && $scope.timeCardDayList[i].status1 != 'Approved' 
                   && $scope.timeCardDayList[i].status1 != 'Admin Approved' && $scope.timeCardDayList[i].status1 != 'Unposted') {
                   overHrs = overHrs + parseFloat($scope.timeCardDayList[i].Hours1);
               }
               if($scope.timeCardDayList[i].Hours2 && $scope.timeCardDayList[i].status2 != 'Approved'
                   && $scope.timeCardDayList[i].status1 != 'Admin Approved' && $scope.timeCardDayList[i].status2 != 'Unposted') {
                   overHrs = overHrs + parseFloat($scope.timeCardDayList[i].Hours2);
               }
               if($scope.timeCardDayList[i].Hours3 && $scope.timeCardDayList[i].status3 != 'Approved'
                   && $scope.timeCardDayList[i].status1 != 'Admin Approved' && $scope.timeCardDayList[i].status3 != 'Unposted') {
                   overHrs = overHrs + parseFloat($scope.timeCardDayList[i].Hours3);
               }
               if($scope.timeCardDayList[i].Hours4 && $scope.timeCardDayList[i].status4 != 'Approved'
                   && $scope.timeCardDayList[i].status1 != 'Admin Approved' && $scope.timeCardDayList[i].status4 != 'Unposted') {
                   overHrs = overHrs + parseFloat($scope.timeCardDayList[i].Hours4);
               }
               if($scope.timeCardDayList[i].Hours5 && $scope.timeCardDayList[i].status5 != 'Approved'
                   && $scope.timeCardDayList[i].status1 != 'Admin Approved' && $scope.timeCardDayList[i].status5 != 'Unposted') {
                   overHrs = overHrs + parseFloat($scope.timeCardDayList[i].Hours5);
               }
               if($scope.timeCardDayList[i].Hours6 && $scope.timeCardDayList[i].status6 != 'Approved' 
                   && $scope.timeCardDayList[i].status1 != 'Admin Approved' && $scope.timeCardDayList[i].status6 != 'Unposted') {
                   overHrs = overHrs + parseFloat($scope.timeCardDayList[i].Hours6);
               }
               if($scope.timeCardDayList[i].Hours7 && $scope.timeCardDayList[i].status7 != 'Approved' 
                   && $scope.timeCardDayList[i].status1 != 'Admin Approved' && $scope.timeCardDayList[i].status7 != 'Unposted') {
                   overHrs = overHrs + parseFloat($scope.timeCardDayList[i].Hours7);
               }
           }
           
           $scope.OverAllHrs = ((overHrs * 100) / 100).toFixed(2);
           
           return ((sum * 100) / 100).toFixed(2);
       }
       
       // this method for editing alredy existing time card day records
       
       var RecordToEdit = {};
       var editRecIndex = 0;
       var deleteStatus;
       var deleteListIds = [];
       
       
       $scope.EditBtnClick = function (record,hrsType,commentType,colour,readOnly,dayId,dateType,statusType) {
           
           $scope.dayRec = [];
           RecordToEdit = {};
           $scope.Hours = '';
           $scope.Comments = '';
           $scope.HoursError = '';
           $scope.CommentsError = '';
           
           deleteStatus = '';
           
           RecordToEdit = record;
           
           //console.log(record);
           editRecIndex = $scope.timeCardDayList.indexOf(record);
           
           $scope.dayRec = record;
           $scope.TypeOfHour = hrsType;
           $scope.cmtType = commentType;
           $scope.clourType = colour;
           $scope.readOnlyType = readOnly;
           $scope.DayId = dayId;
           $scope.dtType = dateType;
           $scope.statusValue = statusType;
           
           $scope.Hours = $scope.dayRec[hrsType];
           $scope.Comments = decodeHTML($scope.dayRec[commentType]);
           
           //$scope.modalStateForDayEdit = 'slds-fade-in-open';
           //$scope.modalBackdropStateForDayEdit = 'slds-modal-backdrop--open';
           
           var booleanFlag = false;
           
           //console.log('::::booleanForbeforelastWeek:::::::::',booleanForbeforelastWeek);
           
           if(!booleanForbeforelastWeek) {
                
                // Added unposted records popup open logic
                
                if(record[$scope.statusValue] != 'Unposted') {
                    if(record[hrsType] !='' && record[hrsType] != null 
                        && record[dateType] != null 
                        && new Date(record[dateType]).getTime() <= curr.getTime()) {
                        
                        if(record.TaskName == 'Fringe-Holiday' && $scope.HolidayDateSet.indexOf(new Date(record[dateType]).getTime()) != -1) {
                            booleanFlag =  false;
                        }else if(record[statusType] != 'Submitted' && record[statusType] != 'Approved' && record[statusType] != 'Admin Approved'){
                            if(!record.holidayBoolean)
                                booleanFlag = true;
                            else
                                booleanFlag = false;
                        }else {
                            booleanFlag = false;
                        }
                        
                    }else if(record[hrsType] !='' && record[hrsType] != null 
                        && record[dateType] != null && record[statusType] != 'Submitted' 
                        && record[statusType] != 'Approved' && record[statusType] != 'Admin Approved' 
                        && new Date(record[dateType]).getTime() > curr.getTime()) {
                    
                        //booleanFlag = false;
                        booleanFlag = true;
                    }
                }else if($scope.DayId && record[$scope.statusValue] == 'Unposted'){
                    booleanFlag = true;
                }
            }else {
                
                if(record[statusType] == 'Reverted') {
                    booleanFlag = true;
                }else {
                    booleanFlag = false;
                }
            }
            
            //console.log('::::booleanFlag::::',booleanFlag);
            if(booleanFlag && $scope.DayId) {
               $scope.modalStateForDayEdit = 'slds-fade-in-open';
               $scope.modalBackdropStateForDayEdit = 'slds-modal-backdrop--open';
            }
                
       }
       
       $scope.OkayForEditBox = function() {
           
           if($scope.Hours && $scope.Comments) {
               $scope.modalStateForDayEdit = '';
               $scope.modalBackdropStateForDayEdit = '';
               
               var oldHrsValue = $scope.dayRec[$scope.TypeOfHour];
               
               $scope.dayRec[$scope.TypeOfHour] = $scope.Hours;
               $scope.dayRec[$scope.cmtType] = $scope.Comments;
               
               var previousStatus = $scope.dayRec[$scope.statusValue];
               
               //$scope.dayRec[$scope.clourType] = 'hrsColour';
               $scope.dayRec[$scope.readOnlyType] = false;
               
               if(deleteStatus) {
                   $scope.dayRec[$scope.statusValue] = deleteStatus;
                   $scope.dayRec[$scope.clourType] = 'deleteColour';
               }else if($scope.dayRec[$scope.statusValue] != 'Unposted'){
                   //$scope.dayRec[$scope.statusValue] = 'Draft';
                   $scope.dayRec[$scope.clourType] = 'hrsColour';
               }else if($scope.dayRec[$scope.statusValue] == 'Unposted'){
                   $scope.dayRec[$scope.statusValue] = 'Draft';
               }
               
               $scope.DayUpdateIdSet = [];
               
               //For comments section update
               
               if($scope.DayId != null) {
                   var cmtObj = {
                        UserName: $scope.UserName,
                        Edited: moment.tz(new Date(), $scope.UserTimezoneValue).format('YYYY-MM-DD h:mm:ss a'),
                        ChargeCode: $scope.dayRec.ProjectName,
                        TaskName: $scope.dayRec.TaskName,
                        Date:$scope.dayRec[$scope.dtType],
                        OldHrs:oldHrsValue,
                        NewHrs:$scope.Hours,
                        Comment:$scope.dayRec[$scope.cmtType],
                        NewStatus: $scope.dayRec[$scope.statusValue],
                        OldStatus: previousStatus
                   };
                   
                   var flagForNotes = true;
                   
                   for(var i = 0;i < $scope.commentsList.length;i++) {
                       
                       if($scope.commentsList[i].ChargeCode == $scope.dayRec.ProjectName 
                           && $scope.commentsList[i].TaskName == $scope.dayRec.TaskName
                           && $scope.commentsList[i].Date == $scope.dayRec[$scope.dtType]
                           && $scope.commentsList[i].NewHrs == oldHrsValue) {
                           
                           console.log('::::::sdfghjklrtyuiocvbnm:::::::');
                           $scope.commentsList[i].UserName = $scope.UserName;
                           $scope.commentsList[i].Edited = moment.tz(new Date(), $scope.UserTimezoneValue).format('YYYY-MM-DD h:mm:ss a');
                           $scope.commentsList[i].OldHrs = oldHrsValue;
                           $scope.commentsList[i].NewHrs = $scope.Hours;
                           $scope.commentsList[i].Comment = $scope.dayRec[$scope.cmtType];
                           $scope.commentsList[i].OldStatus = $scope.dayRec[$scope.statusValue];
                           $scope.commentsList[i].OldStatus = previousStatus;
                           
                           flagForNotes = false;
                       }
                   }
                 
                   if(flagForNotes)
                       $scope.commentsList.push(cmtObj);
                   
                   if($scope.commentsList.length > 0)
                       $scope.NotesSectionDisplay = false;
                   else
                       $scope.NotesSectionDisplay = true;
                       
                   if($scope.dayIdsForSaveCheck.indexOf($scope.DayId) == -1)
                       $scope.dayIdsForSaveCheck.push($scope.DayId);
               }
               
               console.log(':::::$scope.dayRec:::::',$scope.dayRec);
               console.log('::::::$scope.dayIdsForSaveCheck::::::',$scope.dayIdsForSaveCheck);
               
               // Added this function call to change total hrs after records in lightbox edit
               $scope.totalHrsCalculation($scope.dayRec);
           }else {
               if(!$scope.Hours)
                   $scope.HoursError = 'slds-has-error';
               if(!$scope.Comments)
                   $scope.CommentsError = 'slds-has-error';
           }
       }
       
       $scope.CancelForEdit = function() {
           
           $scope.dayRec[$scope.hrsType] = RecordToEdit[$scope.TypeOfHour];
           $scope.dayRec[$scope.commentType] = RecordToEdit[$scope.cmtType];
           
           $scope.modalStateForDayEdit = '';
           $scope.modalBackdropStateForDayEdit = '';
       }
       
       //Change status as Unposted on Delete btn click
       $scope.ChangeSattus_Unpost = function() {
           //$scope.dayRec[$scope.statusValue] = 'Unposted';
           deleteStatus = 'Unposted';
           $scope.OkayForEditBox();
       }
       
        $scope.hrsValidate = function(hrs) {
            $scope.Comments = '';
            var hour = (hrs * 100) % 100;
            if(!(hour == 25 || hour == 50 || hour == 75 || hour == 0)){
                console.log('invalid format');
                $scope.hoursErrorMsg = 'Allowed decimal values are 00, 25, 50, 75';
            }else {
                console.log('correct format');
                $scope.hoursErrorMsg = '';
            }
        }
        
        //Seaparate validation function for Bonus Leave Earned Type time entry
        //The hours should be 4/8/16/20/24
        //Added by NS on Oct 26 2018
        $scope.BLEHrsValidate = function(hrs){
            var hour = parseInt(hrs.toString().split('.')[0]);
            var decimalVal = (hrs * 100) % 100;
            
            if(!((hour == 4 || hour == 8 || hour == 12 || hour == 16 || hour == 20 || hour == 24) && decimalVal == 0)){
                //console.log('invalid format');
                $scope.hoursErrorMsg = 'Allowed hours values are 4, 8, 12, 16, 20, 24';
            }else {
                //console.log('correct format');
                $scope.hoursErrorMsg = '';
            }
        }
        
        // For billable value update in unique key set
        
        $scope.UpdateBillableValue = function(record) {
            
            var billableValue = !record.isBillable;
            
            console.log('::::::location:::::::',record.locationId);
            //console.log(':::::::!record.isBillable:::::',record.isBillable);
            //console.log(':::::::billableValue:::::',billableValue);
            //console.log(':::::::UniqueKeySet:::::',UniqueKeySet);
            
            var key = record.SelectedProject+'-'+record.SelectedProTask+'-'+$scope.selectedEmployee+'-'+record.isBillable+'-'+record.payRollItem+'-'+record.selectedLocation.Id;   
            console.log(':::::::key::::::',key);
            
            console.log(':::index::::key::::::',UniqueKeySet.indexOf(key));
            
            if(UniqueKeySet.indexOf(key) != -1) {
                console.log('::::::enter::existing::::');
                
                $scope.cancelbtnDisplay = false;
                $scope.BillapleFlipDone = true;
                
                $scope.DuplicateMsgValue = 'This combination of Project, Project Task, Contact, Location already exist.';
                
                //$scope.modalStateForDuplicate = 'slds-fade-in-open';
                //$scope.modalBackdropStateForDuplicate = 'slds-modal-backdrop--open';
                
                //var index = UniqueKeySet.indexOf(key);
                //UniqueKeySet[index] = record.SelectedProject+'-'+record.SelectedProTask+'-'+$scope.selectedEmployee+'-'+billableValue+'-'+record.payRollItem;
                //record.isBillable = billableValue;
                
            }else {
                $scope.DuplicateMsgValue = '';
                console.log('::::new::::one::');
                var key2 = record.SelectedProject+'-'+record.SelectedProTask+'-'+$scope.selectedEmployee+'-'+billableValue+'-'+record.payRollItem+'-'+record.selectedLocation.Id;
                var index = UniqueKeySet.indexOf(key2);
                
                console.log('::::::index:::key2:',index);
                console.log('::::::UniqueKeySet[index]:',UniqueKeySet[index]);
                
                if($scope.changesMade && $scope.oldRowselected) {
                    var oldKey = $scope.oldRowselected.SelectedProject+'-'+$scope.oldRowselected.SelectedProTask+'-'+$scope.selectedEmployee+'-'+$scope.oldRowselected.isBillable+'-'+$scope.oldRowselected.payRollItem+'-'+$scope.oldRowselected.selectedLocation.Id;
                    var oldIndex = UniqueKeySet.indexOf(oldKey);
                    UniqueKeySet[oldIndex] = record.SelectedProject+'-'+record.SelectedProTask+'-'+$scope.selectedEmployee+'-'+record.isBillable+'-'+record.payRollItem+'-'+record.selectedLocation.Id;
                }else {
                    UniqueKeySet[index] = record.SelectedProject+'-'+record.SelectedProTask+'-'+$scope.selectedEmployee+'-'+record.isBillable+'-'+record.payRollItem+'-'+record.selectedLocation.Id;
                }
                
                console.log(':::fdsfdsf:::UniqueKeySet[index]:',UniqueKeySet[index]);
                //record.isBillable = record.isBillable;
            }
        }
        
        // Added by Sukanya on Dec 3 2016 for edit icon dispaly condition Check
        $scope.EditIconDisplay = function (dayValue,HrsIndex,DayIdIndex,dateIndex,statusType) {
            
            if(!booleanForbeforelastWeek) {
                
                if($scope.UnpostedRecordIds.indexOf(dayValue[DayIdIndex]) == -1) {
                
                    if(dayValue[HrsIndex] != '' && dayValue[HrsIndex] != null 
                        && dayValue[DayIdIndex] != null 
                        && new Date(dayValue[dateIndex]).getTime() <= curr.getTime()) {
                        
                        if(dayValue.TaskName == 'Fringe-Holiday' && $scope.HolidayDateSet.indexOf(new Date(dayValue[dateIndex]).getTime()) != -1) {
                            return false;
                        }else if(dayValue[statusType] != 'Submitted' && dayValue[statusType] != 'Approved' && dayValue[statusType] != 'Admin Approved'){
                            if(!dayValue.holidayBoolean && !$scope.recallBtnDisplay)
                                return true;
                            else
                                return false;
                        }else {
                            return false;
                        }
                        
                    }else if(dayValue[HrsIndex] != '' && dayValue[HrsIndex] != null 
                        && dayValue[DayIdIndex] != null && dayValue[statusType] != 'Submitted' 
                        && dayValue[statusType] != 'Approved' && dayValue[statusType] != 'Admin Approved' 
                        && new Date(dayValue[dateIndex]).getTime() > curr.getTime()) {
                    
                        //return false;
                        return true;
                    }
                }else{
                    return false;
                }
            }else {
                if($scope.UnpostedRecordIds.indexOf(dayValue[DayIdIndex]) == -1 && dayValue[statusType] == 'Reverted') {
                    return true;
                }else {
                    return false;
                }
            }
        }
        //console.log(':::::::before:::calll:::::::',$scope.FromDate,$scope.ToDate);
        
        var dt1 = moment($scope.selectedWeekRange.split(' to ')[0],'MM-DD-YYYY').format('YYYY-MM-DD');
        var dt2 = moment(dt1).add(6,'days').format('YYYY-MM-DD');
        
        getContactRelatedInformation(dt1,dt2);
        
        // Added to display Hrs as read only
        $scope.HrsDisableFunction = function(record,HrsType,DayType,readOnlyType,dayIdType,statusType) {
        
            var rateTypes = ['FT Salary & Benefits','FT Hourly & Benefits'];
            // Added this code for Satff community
            var isSitepage = false;
            if('{!$Site.Name}' != '') {
                isSitepage = true;
            }
            
            var recordDate = new Date(record[DayType]);
            recordDate = recordDate.getTime() + recordDate.getTimezoneOffset() * 1000 * 60;
             
            if(!booleanForbeforelastWeek) {
                if($scope.UnpostedRecordIds.indexOf(record[dayIdType]) == -1) {
                    if(record[dayIdType] && record[HrsType] && (new Date(recordDate).getTime() <= curr.getTime() || new Date(recordDate).getTime() > curr.getTime())) { 
                        record[readOnlyType] = true;
                    }else if(record.TaskType == 'FMLA' && new Date(recordDate).getTime() > curr.getTime()) {
                        return false;
                    }else if(record.TaskType != 'Fringe' && new Date(recordDate).getTime() > curr.getTime()) {
                        return true;
                    }else if(record.TaskType == 'Fringe') {
                        if(record.TaskName == 'Fringe-Holiday' && $scope.HolidayDateSet.indexOf(new Date(record[DayType]).getTime()) != -1 
                                && $scope.EEPayStatus != 'Hourly - PT') {
                            
                            if((!isSitepage || (isSitepage && $scope.EEPayStatus != 'Hourly'))) {
                                record[readOnlyType] = true;
                                
                                if(rateTypes.indexOf(record.CRRateType) != -1) {
                                    if(moment(record[DayType]).day() != 0 && moment(record[DayType]).day() != 6)                                    	
                                    	record[HrsType] =  '8.00';
                                    record.holidayBoolean = true;
                                }
                                
                                if(moment(record[DayType]).day() != 0 && moment(record[DayType]).day() != 6)
                                	$scope.totalHrsCalculation(record);
                                
                            }else if(isSitepage && $scope.EEPayStatus == 'Hourly') {
                                if(!record.holidayBoolean)
                                    record[readOnlyType] = false;
                                else
                                    record[readOnlyType] = true;
                            }
                            
                        }else if(record.TaskName == 'Fringe-Holiday') { // Not allow user to enter value for Fringe- Holiday
                            record[readOnlyType] = true;
                        }else if(new Date(recordDate).getTime() > curr.getTime()){
                            if(!record.holidayBoolean && !$scope.disableInputBox)
                                record[readOnlyType] = false;
                            else
                                record[readOnlyType] = true;
                        }else if(!record[HrsType] && $scope.disableInputBox) {
                            return true;
                        }
                        
                    }else if(new Date(recordDate).getTime() <= new Date($scope.TimeLogLockDate).getTime()) {
                        record[readOnlyType] = true;
                        record.disableBillable = true;
                        record.disablePayRoll = true;
                    }else if(!record[HrsType] && $scope.disableInputBox) {
                        return true;
                    }
                   
                    return record[readOnlyType];
                    
                }else{
                    if($scope.disableInputBox)
                        return true;
                    else
                        return false;
                }
                
            }else {
                
                if(record[dayIdType] && record[HrsType])
                    return true;
                else if($scope.revertCnt > 0)
                    return false;
                else
                    return true;
            }
        }
        
        // Added to Capture Comment for Bonus Leave Earned Task type creation
        
        var NewTimeDay = {};
        
        $scope.OpenPopupForEarned = function(day,HrsType,commentType,dayType,dayIdType,readOnlyType,status,colorType) {
            
            $scope.HoursError = '';
            $scope.CommentsError = '';
            console.log(':::::TskName::::::',day.TaskName);
           
            if(!day[dayIdType] && day.TaskName.indexOf('Bonus Leave Earned') != -1){
           
               $scope.NewDayRec = {};
               $scope.Hours = '';
               $scope.Comments = '';
               
               NewTimeDay = day;
               
               $scope.NewDayRec = day;
               $scope.NewTypeOfHour = HrsType;
               $scope.NewcmtType = commentType;
               $scope.NewdtType = dayType;
               $scope.NewReadOnly = readOnlyType;
               
               $scope.modalStateForNewDay = 'slds-fade-in-open';
               $scope.modalBackdropStateForNewDay = 'slds-modal-backdrop--open';
               
           }else if(day[dayIdType] && day[status] == 'Unposted'){
               $scope.EditBtnClick(day,HrsType,commentType,colorType,readOnlyType,day[dayIdType],dayType,status);
           }
        }
        
        $scope.OkayForNewRecord = function() {
            
            if($scope.Hours && $scope.Comments) {
                
               $scope.modalStateForNewDay = '';
               $scope.modalBackdropStateForNewDay = '';
               
               $scope.NewDayRec[$scope.NewTypeOfHour] = $scope.Hours;
               $scope.NewDayRec[$scope.NewcmtType] = $scope.Comments;
               $scope.NewDayRec[$scope.NewReadOnly] = false;
                
            }else {
               if(!$scope.Hours)
                   $scope.HoursError = 'slds-has-error';
               if(!$scope.Comments)
                   $scope.CommentsError = 'slds-has-error';
           }
        }
        
        $scope.CancelForNewRecord = function() {
        
           //$scope.NewDayRec[$scope.NewTypeOfHour] = RecordToEdit[$scope.NewTypeOfHour];
           //$scope.NewDayRec[$scope.NewcmtType] = RecordToEdit[$scope.NewcmtType];  
                    
           $scope.modalStateForNewDay = '';
           $scope.modalBackdropStateForNewDay = '';
        }
        
        // these below methods are related to Summary view of time card days from current date - from 1st half month / 2nd half month
        
        function getSummaryTimeInformation(startDate,EndDate) {
            console.log('::::startDate::::::::EndDate::::::::::::::',startDate,EndDate);
            document.getElementById("spinner").style.display = 'block';
             Visualforce.remoting.Manager.invokeAction(
                    '{!$RemoteAction.DLS_Staff_Time_Entry_Ctrl.getSummaryTimeRecords}',
                    startDate,EndDate,
                    function(records, ev) {
                        if(ev.status) {
                            console.log(':::::result::summary:::',records);
                            $timeout(function() {
                                $scope.summaryUsrDetails = {};
                                $scope.SummaryDataList = [];
                                AllDataArray = [];
                                AllDataArray1 = [];
                                
                                $scope.showDetaildata = records.showDetailsummaryData;
                                AllDataArray1 = records.showDetailsummaryData;
                                
                                AllDataArray = records.timeSummaryData;
                              
                                for(var key in AllDataArray) {
                                    var Hrssum = 0;
                                    var amountSum = 0;
                                    
                                    if(AllDataArray.hasOwnProperty(key)) {
                                        for(var i = 0;i < AllDataArray[key].length;i++) {
                                            Hrssum += AllDataArray[key][i].Hours;
                                            
                                            if(AllDataArray[key][i].TotalAmount)
                                                amountSum += AllDataArray[key][i].TotalAmount;
                                        }
                                    }
                                    
                                    //var dateKey = new Date(parseInt(key)).setTime(new Date(parseInt(key)).getTime() + (new Date(parseInt(key)).getTimezoneOffset() * 1000 * 60));
                                    var dateKey = moment(key);
                                    $scope.SummaryDataList.push({dateValue:dateKey._i,Hours:Hrssum,TotalAmount:amountSum});
                                }
                                
                                //console.log(':::::::$scope.SummaryDataList:::::',$scope.SummaryDataList);
                                
                                var approvedHrs = 0;
                                var approvedAmt = 0;
                                var rejectedHrs = 0
                                
                                for(var i = 0;i < AllDataArray1.length;i++) {
                                    
                                    if(AllDataArray1[i].Status == 'Approved' || AllDataArray1[i].Status == 'Admin Approved') {
                                        approvedHrs = approvedHrs + AllDataArray1[i].Hours;
                                        approvedAmt = approvedAmt + AllDataArray1[i].TotalAmount;
                                    }
                                    
                                    if(AllDataArray1[i].Status == 'Rejected') {
                                       rejectedHrs = rejectedHrs + AllDataArray1[i].Hours;
                                    }
                                }
                                
                                console.log(':::approvedHrs:::::::approvedAmt:::::',approvedHrs,approvedAmt);
                                
                                $scope.summaryUsrDetails.userName = records.userName;
                                $scope.summaryUsrDetails.bonusLeavebalance = records.bonusLeavebalance;
                                $scope.summaryUsrDetails.bonusLeaveearned = records.bonusLeaveearned;
                                $scope.summaryUsrDetails.bonusLeavetaken = records.bonusLeavetaken;
                                
                                $scope.summaryUsrDetails.vocationLeavebalance = records.vocationLeavebalance;
                                $scope.summaryUsrDetails.vocationLeaveearned = records.vocationLeaveearned;
                                $scope.summaryUsrDetails.vocationLeavetaken = records.vocationLeavetaken;
                                
                                $scope.summaryUsrDetails.sickLeavebalance = records.sickLeavebalance;
                                $scope.summaryUsrDetails.sickLeaveearned = records.sickLeaveearned;
                                $scope.summaryUsrDetails.sickLeavetaken = records.sickLeavetaken;
                                
                                $scope.summaryUsrDetails.totalApprovedHrs = approvedHrs;
                                $scope.summaryUsrDetails.totalApprovedAmt = '$'+approvedAmt;
                                $scope.summaryUsrDetails.totalRejectedHrs = rejectedHrs;
                                
                                $scope.SummaryStatusFilter = ['Draft/Submitted/Approved/Recalled/Reverted/Admin Approved','Draft','Submitted','Approved','Rejected','Recalled','Reverted','Admin Approved'];
                                $scope.SummaryStatus = 'Draft/Submitted/Approved/Recalled/Reverted/Admin Approved';
                                
                                $scope.FilterSummaryData();
                                
                                if(btnCallingCount == 0)
                                    $scope.openBox12();
                                
                                document.getElementById("spinner").style.display = 'none';
                            },0);
                        } else {
                            console.log('::::ev::::',ev);
                        }
                    },
                    {escape: true}
                ); 
        }
        
        var monthDt1 = moment($scope.summaryWeekRange.split(' to ')[0],'MM-DD-YYYY').format('YYYY-MM-DD');
        var monthDt2 = moment($scope.summaryWeekRange.split(' to ')[1],'MM-DD-YYYY').format('YYYY-MM-DD');
        
        //console.log(':::::monthDt1,monthDt2:::::::',$scope.summaryWeekRange);
        
        getSummaryTimeInformation(monthDt1,monthDt2);
        
        $scope.summaryToDateCalc = function() {
        
           document.getElementById("spinner").style.display = 'block';
            
           $scope.MonthDaysList = [];
            
           console.log('::::::::$scope.summaryWeekRange::::::',$scope.summaryWeekRange);
           
           var monthDt1 = moment($scope.summaryWeekRange.split(' to ')[0],'MM-DD-YYYY').format('YYYY-MM-DD');
           var monthDt2 = moment($scope.summaryWeekRange.split(' to ')[1],'MM-DD-YYYY').format('YYYY-MM-DD');
           
           var monthStart = moment(monthDt1);
           var monthEnd = moment(monthDt2);
            
           while(monthStart.isBefore(monthEnd) || monthStart.isSame(monthEnd)) {
              $scope.MonthDaysList.push(monthStart.format('YYYY-MM-DD'));
              monthStart.add(1, 'days').format('YYYY-MM-DD');
           }
           getSummaryTimeInformation(monthDt1,monthDt2);
        }
        
        // get hours summary data
        $scope.hoursSummaryfunction = function(type) {
            var sumHrs = 0;
            
            if(type == 'showDetail') {
                if($scope.showDetaildata) {
                    for(var i = 0;i < $scope.showDetaildata.length;i++) {
                        $scope.showDetaildata[i].dateValue = millisecondToString($scope.showDetaildata[i].dateValue);
                        sumHrs += $scope.showDetaildata[i].Hours;
                    }
                    return sumHrs;
                }
            }else if(type == 'Summary') {
                if($scope.SummaryDataList) {
                    for(var i = 0;i < $scope.SummaryDataList.length;i++) {
                        sumHrs += $scope.SummaryDataList[i].Hours;
                    }
                    return sumHrs;
                }
            }
        }
        
        // get Period Standard Hours
        $scope.stdHrsCalculation = function() {
            
            var dates = $scope.summaryWeekRange.split(' to ');
             
            var day1 = moment(dates[0]);
            var day2 = moment(dates[1]);
            var adjust = 0;
  
            if((day1.dayOfYear() === day2.dayOfYear()) && (day1.year() === day2.year())){
                return 0;
            }
            
            //Check if second date is before first date to switch
            if(day2.isBefore(day1)){
                day2 = moment(dates[0]);
                day1 = moment(dates[1]);
            }
            
            //Check if first date starts on weekends
            if(day1.day() === 6) { //Saturday
                //Move date to next week monday
                day1.day(8);
            } else if(day1.day() === 0) { //Sunday
                //Move date to current week monday
                day1.day(1);
            }
            
            //Check if second date starts on weekends
            if(day2.day() === 6) { //Saturday
                //Move date to current week friday
                day2.day(5);
            } else if(day2.day() === 0) { //Sunday
                //Move date to previous week friday
                day2.day(-2);
            }
            
            var day1Week = day1.isoWeek();
            var day2Week = day2.isoWeek();
            
            //Check if two dates are in different week of the year
            if(day1Week !== day2Week){
                //Check if second date's year is different from first date's year
                if (day2Week < day1Week){
                    day2Week += day1Week;
                }
                //Calculate adjust value to be substracted from difference between two dates
                adjust = -2 * (day2Week - day1Week);
            }
           
            return (day2.diff(day1, 'days') + adjust + 1)*8;
        }
                        
        // get Amountsummary data
         
        $scope.amountSummaryfunction = function(type) {
            var sumAmount = 0;
            
            if(type == 'showDetail') {
            
                if($scope.showDetaildata) {
                    for(var i = 0;i < $scope.showDetaildata.length;i++) {
                        sumAmount += $scope.showDetaildata[i].TotalAmount;
                    }
                    return sumAmount.toFixed(2);
                }
            }else if(type == 'Summary') {
                if($scope.SummaryDataList) {
                    for(var i = 0;i < $scope.SummaryDataList.length;i++) {
                        sumAmount += $scope.SummaryDataList[i].TotalAmount;
                    }
                    return sumAmount.toFixed(2);
                }
            }
        }
        
        // Filter summary data with status values
        
        $scope.FilterSummaryData = function() {
        
           // document.getElementById("spinner").style.display = 'block';
            
            $scope.SummaryDataList = [];
            $scope.showDetaildata = [];
            
            console.log('::::::$scope.SummaryStatus :::::::::::',$scope.SummaryStatus);
            
            if($scope.SummaryStatus != 'Draft/Submitted/Approved/Recalled/Reverted/Admin Approved') {
            
                // Changed group by table view based on status values
                
                for(var key in AllDataArray) {
                    var Hrssum = 0;
                    var amountSum = 0;
                    if(AllDataArray.hasOwnProperty(key)) {
                        for(var i = 0;i < AllDataArray[key].length;i++) {
                        
                            if(AllDataArray[key][i].Status == $scope.SummaryStatus) {
                                Hrssum += AllDataArray[key][i].Hours;
                                
                                if(AllDataArray[key][i].TotalAmount)
                                    amountSum += AllDataArray[key][i].TotalAmount;
                            }else {
                                Hrssum += 0;
                                amountSum += 0;
                            }
                        }
                    }
                    //var dateKey = new Date(parseInt(key)).setTime(new Date(parseInt(key)).getTime() + (new Date(parseInt(key)).getTimezoneOffset() * 1000 * 60));
                    var dateKey = moment(key);
                    $scope.SummaryDataList.push({dateValue:dateKey._i,Hours:Hrssum,TotalAmount:amountSum});
                }
                
                for(var i = 0;i < AllDataArray1.length;i++) {
                
                    if(AllDataArray1[i].Status == $scope.SummaryStatus) {
                    
                        $scope.showDetaildata.push(AllDataArray1[i]);
                        
                    }else if(AllDataArray1[i].Status != $scope.SummaryStatus){
                        var obj = {};
                        obj = angular.copy(AllDataArray1[i]);
                        obj.Hours = 0.00;
                        obj.Payrate = 0.00;
                        obj.TotalAmount = 0.00;
                        $scope.showDetaildata.push(obj);
                    }
                }
               
            }else {
                
                // Changed group by table view based on status values
                
                for(var key in AllDataArray) {
                    var Hrssum = 0;
                    var amountSum = 0;
                    if(AllDataArray.hasOwnProperty(key)) {
                        for(var i = 0;i < AllDataArray[key].length;i++) {
                            if(AllDataArray[key][i].Status != 'Rejected') {
                                Hrssum += AllDataArray[key][i].Hours;
                                
                                if(AllDataArray[key][i].TotalAmount)
                                    amountSum += AllDataArray[key][i].TotalAmount;
                                
                            }else {
                                Hrssum += 0;
                                amountSum += 0;
                            }
                        }
                    }
                    //var dateKey = new Date(parseInt(key)).setTime(new Date(parseInt(key)).getTime() + (new Date(parseInt(key)).getTimezoneOffset() * 1000 * 60));
                    var dateKey = moment(key);
                    $scope.SummaryDataList.push({dateValue:dateKey._i,Hours:Hrssum,TotalAmount:amountSum});
                }
                
                for(var i = 0;i < AllDataArray1.length;i++) {
                
                    if(AllDataArray1[i].Status != 'Rejected') {
                    
                        $scope.showDetaildata.push(AllDataArray1[i]);
                        
                    }else {
                        
                        var obj = {};
                        obj = angular.copy(AllDataArray1[i]);
                        obj.Hours = 0.00;
                        obj.Payrate = 0.00;
                        obj.TotalAmount = 0.00;
                        $scope.showDetaildata.push(obj);
                    }
                }
               
                //$scope.SummaryDataList = AllDataArray;
            }
            
            //document.getElementById("spinner").style.display = 'none';
        }
        
        var i = 0;
        $scope.TableFlipfunction = function() {
            if(i == 0) {
                $scope.tableViewDisplay = true;
                i = 1;
            }else {
                $scope.tableViewDisplay = false;
                i = 0;
            }
        }
        
        // Added by Sukanya on 19.1.2017 for submit action
        
        $scope.submitbtnClickFunction = function(btnType) {
            console.log(':::::::$scope.OverAllHrs:::::',$scope.OverAllHrs);
            $scope.buttonType = btnType;
            $scope.overAllactionMsg = 'The total number of hours being submitted is '+$scope.OverAllHrs+'. Would you like to Submit changes?';
            $scope.modalStateForSubmission  =  'slds-fade-in-open';
            $scope.modalBackdropStateForSubmission = 'slds-modal-backdrop--open';
        }
        
        // Added by Sukanya on JAN 20 2017 for Recall action
        
        $scope.recallBtnclickFunction = function(btnType) {
        
            $scope.buttonType = btnType;
            $scope.overAllactionMsg = 'Would you like to recall changes?';
            $scope.modalStateForSubmission  =  'slds-fade-in-open';
            $scope.modalBackdropStateForSubmission = 'slds-modal-backdrop--open';
        }
        
        $scope.OkayForSubmission = function() {
        
            if($scope.buttonType == 'Submit') {
                $scope.SaveCallingFunction('FromSubmit');
            }else if($scope.buttonType == 'Recall') {
                $scope.SaveCallingFunction('FromRecall');
            }
            
            $scope.modalStateForSubmission  =  '';
            $scope.modalBackdropStateForSubmission = '';
        }
        
        // Method to display Project Task validation msg
        function displayValidationResult() {
            //$scope.TaskValidationMsg = $scope.projectTaskValidation;
            $scope.modalStateForTaskValidation = 'slds-fade-in-open';
            $scope.modalBackdropStateForTaskValidation = 'slds-modal-backdrop--open';
        }
        
        // Close click function
        $scope.CloseClickOnValidate = function() {
        
            // For project task validation
            $scope.modalStateForTaskValidation = '';
            $scope.modalBackdropStateForTaskValidation = '';
            
            // For Home Department validation
            $scope.modalStateForLocationValidation = '';
            $scope.modalBackdropStateForLocationValidation  = '';
            
            //window.location.href = '/apex/DLS_Staff_Time_Entry_Page';
            window.location.reload();
        }
        
        // Method to validate Project task after selection
        
        $scope.TaskValidationFunction = function(record) {
            
            $scope.projectTaskValidation = {};
            
            record.hidebillableSection = false;
            record.PayRollItemList = [];
            record.payRollItem = '';
            record.isBillable = false;
            
            var nonAdminProjectRTNames = ['EFL_Projects','CD_Projects','Linguist_Support_Projects'];
            
            console.log(':::::TaskValidationFunction:::::',record);
            var selectedTask;
            for(var i = 0;i < record.projectTasks.length;i++) {
                
                if(record.projectTasks[i].Id == record.SelectedProTask) {
                    selectedTask = record.projectTasks[i].Name;
                    record.TaskName = record.projectTasks[i].Name;
                    
                    // Remove extra space in between (-) symbol
                    if(record.TaskName.indexOf(' - '))
                        record.TaskName = record.TaskName.split(' - ').join('-');
                    
                    record.TaskType = record.projectTasks[i].Project_Task_Type__c;
                    record.ParentProjectTask = record.projectTasks[i].Parent_Project_Task__c;
                    
                    // Get Contact related Cost Rate for Fringe records
                    if(record.TaskType == 'Fringe' || record.TaskType == 'FMLA' 
                        || record.TaskType == 'FMLA Non-Compensatory' || record.TaskType == 'Non-Compensatory'
                        || record.TaskType == 'FMLA Compensatory') { 
                               
                        console.log(':::rtyuinbb::::::::::::',$scope.task_PayrollItemMap[record.TaskName]);
                        if(record.TaskType != 'Non-Compensatory' && $scope.task_PayrollItemMap[record.TaskName]) {
                            
                            record.PayRollItemList = $scope.task_PayrollItemMap[record.TaskName];
                            record.payRollItem = record.PayRollItemList.length > 0 ? record.PayRollItemList[0]:null;
                        
                        }else if((record.TaskType == 'Non-Compensatory' || record.TaskType == 'FMLA Compensatory') 
                            && record.TaskType != record.TaskName && $scope.task_PayrollItemMap[record.TaskName]) {
                            
                            record.PayRollItemList = $scope.task_PayrollItemMap[record.TaskName];
                            record.payRollItem = record.PayRollItemList.length > 0 ? record.PayRollItemList[0]:null;
                        
                        }else if(record.TaskType == 'Non-Compensatory' && record.TaskType == record.TaskName && $scope.task_PayrollItemMap['LWOP']) {
                            record.PayRollItemList = $scope.task_PayrollItemMap['LWOP'];
                            record.payRollItem = record.PayRollItemList.length > 0 ? record.PayRollItemList[0]:null;
                        }
                        
                    }else if(nonAdminProjectRTNames.indexOf(record.projectRTName) != -1 && record.TaskType != 'Language Training' 
                            && record.TaskType != 'Curriculum Development' && record.TaskType != 'Linguist Support' && record.TaskType != 'Linguist Support Services') {
                        record.PayRollItemList = $scope.task_PayrollItemMap[record.TaskName];
                        record.payRollItem = record.PayRollItemList.length > 0 ? record.PayRollItemList[0]:null;
                    }
                    
                    // Get Contact Assignent related Cost Rate records for all type of projects - (Fringe & Non fringe)
                    
                    var conAssign = [];
                    var payrollItem = '';
                    
                    if(record.projectRTName == 'Admin_Projects') {
                        conAssign = _.filter($scope.contactAssignments, function(data) {
                            if(data.Project__c == record.SelectedProject && data.Candidate_Name__c == $scope.selectedEmployee) {
                                return data;
                            }
                        });
                        
                        if(record.TaskType == 'ADMINISTRATIVE' && record.projectTasks[i].Payroll_Item__c == 'RNB')
                            payrollItem = record.projectTasks[i].Payroll_Item__c;
                        
                    }else if(nonAdminProjectRTNames.indexOf(record.projectRTName) != -1) {
                        conAssign = _.filter($scope.contactAssignments, function(data) {
                            if(data.Project__c == record.SelectedProject && data.Candidate_Name__c == $scope.selectedEmployee) {
                                return data;
                            }
                        });
                    }else {
                        
                        // For Language Training- Preparation Project Task condition
                        if(record.TaskName.indexOf('Language Training- Preparation') == -1) {
                            conAssign = _.filter($scope.contactAssignments, function(data) {
                                if(data.Project_Task__c == record.SelectedProTask && data.Candidate_Name__c == $scope.selectedEmployee) {
                                    return data;
                                }
                            });
                        }else {
                            conAssign = _.filter($scope.contactAssignments, function(data) {
                                if(data.Project_Task__c == record.ParentProjectTask && data.Candidate_Name__c == $scope.selectedEmployee) {
                                    return data;
                                }
                            });
                        }
                    }
                    
                    console.log('::::conAssign::::::',conAssign);
                    
                    if(conAssign.length > 0) {
                        if(record.TaskType != 'Fringe' && record.TaskType != 'FMLA' 
                            && record.TaskType != 'FMLA Non-Compensatory' && record.TaskType != 'Non-Compensatory'
                            && record.TaskType != 'FMLA Compensatory') {
                            if(record.projectRTName == 'Admin_Projects' && payrollItem) {
                                record.payRollItem = payrollItem;
                            } else {
                                
                                // Below changes for CR billale & non billable payroll item related
                                
                                if(conAssign[0].Rate_Card_Rate__c != null) {
                                    record.PayRollItemList = [];
                                    
                                    if(conAssign[0].Rate_Card_Rate__r.Payroll_Item__c)
                                        record.PayRollItemList.push(conAssign[0].Rate_Card_Rate__r.Payroll_Item__c);  
                                    if(conAssign[0].Rate_Card_Rate__r.Non_Billable_Payroll_Item__c)
                                        record.PayRollItemList.push(conAssign[0].Rate_Card_Rate__r.Non_Billable_Payroll_Item__c);
                                    
                                    record.prMap = {};
                                    if(conAssign[0].Rate_Card_Rate__r.Payroll_Item__c)
                                        record.prMap[conAssign[0].Rate_Card_Rate__r.Payroll_Item__c] = true; 
                                           
                                    if(conAssign[0].Rate_Card_Rate__r.Non_Billable_Payroll_Item__c)
                                        record.prMap[conAssign[0].Rate_Card_Rate__r.Non_Billable_Payroll_Item__c] = false;  
                                }
                                if(record.PayRollItemList && record.PayRollItemList.length > 1)
                                    record.payRollItem = conAssign[0].Payroll_Item__c;
                                else
                                    record.payRollItem = record.PayRollItemList[0];
                            }
                        }
                        record.costRateId = conAssign[0].Rate_Card_Rate__c;
                        record.contactAssignId = conAssign[0].Id;
                        record.CRRateType = decodeHTML(conAssign[0].Rate_Card_Rate__r.Rate_Type__c);
                    }
                        
                    if(!record.projectTasks[i].Project_Task_Type__c) {
                       if(!$scope.projectTaskValidation[record.projectTasks[i].Id] && record.projectTasks[i].Name.indexOf('FMLA Non-Compensatory') == -1 
                            && record.projectTasks[i].Name.indexOf('Non-Compensatory') == -1) {
                            
                           $scope.projectTaskValidation[record.projectTasks[i].Id] = record.projectTasks[i].Name; 
                       }
                    }
                }
            }
            
            if(Object.keys($scope.projectTaskValidation).length > 0) {
                displayValidationResult();
                
                if(record) {
                    var key = record.SelectedProject+'-'+record.SelectedProTask+'-'+$scope.selectedEmployee+'-'+record.isBillable+'-'+record.payRollItem+'-'+record.selectedLocation.Id;   
                    if(UniqueKeySet.indexOf(key) != -1) {
                        var index = UniqueKeySet.indexOf(key);
                        UniqueKeySet.splice(index,1);
                    }
                    $scope.timeCardDayList.splice($scope.timeCardDayList.indexOf(record), 1);
                }
            }
           
            // To hide payroll item selection for all tasks except Fringe-other pay
            if((selectedTask.indexOf('Fringe-Other Pay') != -1 || selectedTask.indexOf('FMLA Compensatory') != -1)
                || record.projectRTName != 'Admin_Projects') {
                
               record.disablePayRoll = false;
            } else {
                record.disablePayRoll = true;
            }
            
            // Prepopulate values for billable checkbox values based on CR payroll item values
            // To disablebillable check for Non Admin projects based on Cost Rate billable & Non billable Payroll Item values
            if(record.projectRTName != 'Admin_Projects') {
            
                if((record.projectRTName != 'EFL_Projects' && record.projectRTName != 'CD_Projects') 
                    || (record.projectRTName == 'EFL_Projects' && record.TaskType == 'Language Training')
                    || ((record.projectRTName == 'CD_Projects' || record.projectRTName == 'Linguist_Support_Projects') && (record.TaskType == 'Curriculum Development' || record.TaskType == 'Linguist Support' 
                        || record.TaskType == 'Linguist Support Services')
                    )) {
                    
                    if(record.payRollItem && record.PayRollItemList.length > 1)
                        record.isBillable = record.prMap[record.payRollItem];
                    
                    record.hidebillableSection = true;
                }else {
                    record.isBillable = false;
                    record.hidebillableSection = false;
                }
            }else {
                record.hidebillableSection = false;
            }    
           
        }
        
        // flip billable value based on payroll item change - for Non Admin projects
        $scope.payrollItemChange = function(record) {
            
            if(record.projectRTName != 'Admin_Projects' && record.PayRollItemList && record.PayRollItemList.length > 1) {
                console.log(record.payRollItem,record.prMap[record.payRollItem]);
                if(record.payRollItem && record.PayRollItemList.length > 1) {
                    record.isBillable = record.prMap[record.payRollItem];
                }
            }
        }
        
        $scope.hideInputBox = function(record,dateType) {
            var recordDate = new Date(record[dateType]);
            recordDate = recordDate.getTime() + recordDate.getTimezoneOffset() * 1000 * 60;
            
            if(new Date(recordDate).getTime() > new Date().getTime() && record.TaskType != 'Fringe')
                return false;
            else 
                return true;
        }
        
       
       // Capture updation of each record to decide wheather we can display confirmation window or not
        
        $scope.captureUpdation = function(record,hrsType,IdType,statusValue) {
           //console.log('::::capture:::::::',record,hrsType,IdType,statusValue);
           if(record[IdType]) {
               var obj = {Total_Hours_Before_Approved__c:record[hrsType]};
               if(record[hrsType] && $scope.UpdationRecordList.indexOf(obj) == -1) {
                   $scope.UpdationRecordList.push(obj);
               }
           }else {
               var obj = {Total_Hours_Before_Approved__c:record[hrsType]};
               if(record[hrsType] && $scope.UpdationRecordList.indexOf(obj) == -1) {
                   $scope.UpdationRecordList.push(obj);
               }
           }
       }
       
       $scope.displayConfirmationWindow = function() {
           
           if($scope.UpdationRecordList.length > 0) {
               $scope.ToDateCalculation();
           }else {
               document.getElementById("spinner").style.display = 'block';
               
                var dt1 = moment($scope.selectedWeekRange.split(' to ')[0],'MM-DD-YYYY').format('YYYY-MM-DD');
                var dt2 = moment(dt1,'MM-DD-YYYY').add(6,'days').format('YYYY-MM-DD');
                
                if(moment(dt1).isAfter($scope.TimeLogLockDate)) {
                    currentSelection = $scope.selectedWeekRange;
                    $scope.selectedWeekRange = previouslySelectedweek;
                    
                    $scope.FromDate = moment($scope.selectedWeekRange.split(' to ')[0]).format('YYYY-MM-DD');
                    $scope.ToDate = moment($scope.FromDate).add(6,'days').format('YYYY-MM-DD');
                    
                    $scope.NotesSectionDisplay = true;
                    $scope.AddBtnDisplay = true;
                }else {
                    console.log(':::::::enter lock::date::::::::::::');
                    
                    currentSelection = $scope.selectedWeekRange;
                    $scope.selectedWeekRange = previouslySelectedweek;
                    
                    $scope.FromDate = moment($scope.selectedWeekRange.split(' to ')[0]).format('YYYY-MM-DD');
                    $scope.ToDate = moment($scope.FromDate).add(6,'days').format('YYYY-MM-DD');
                    
                    $scope.NotesSectionDisplay = true;
                    
                    $scope.AddBtnDisplay = false;
                    
                    $scope.LockPeriodMessage = 'You cannot create and edit Time Card Day record after Time Card Day locking period ('+$scope.TimeLogLockDate+').';
                }
                $scope.proceedwithoutsave();
           }
       }
       
       // Function to display home department validation result
       function displayLocationvalidationResult() {
           $scope.modalStateForLocationValidation = 'slds-fade-in-open';
           $scope.modalBackdropStateForLocationValidation  = 'slds-modal-backdrop--open';
       }
       
       // Function to display Cost Rate validation msg
       function costRateValidationMsg() {
           $scope.modalStateForCRValidation = 'slds-fade-in-open';
           $scope.modalBackdropStateForCRValidation = 'slds-modal-backdrop--open';
       }
       
       $scope.closeCRValidation = function() {
           $scope.modalStateForCRValidation = '';
           $scope.modalBackdropStateForCRValidation = '';
           window.location.reload();
       }
       
       
       // Back btn code for Staff Community timesheet view
       $scope.backBtn = function() {
           
            var isSitepage = false;
            if('{!$Site.Name}' != '') {
                isSitepage = true;
            }
            
            var uiTheme = '{!$User.UIThemeDisplayed}';
           if(!isSitepage) {
               window.location.href = '#/';
           }else {
                if(uiTheme == 'Theme4d' || uiTheme == 'Theme4t'){
                    var urlPrefix = '{!$Label.Community_Site_Prefix}';
                    sforce.one.navigateToURL(urlPrefix+'/s/');
                }else {
                    window.location.href = '/s';
                }
           }
       }
       
        function decodeHTML(encodedStr){
            var parser = new DOMParser;
            var dom = parser.parseFromString(
                '<!doctype html><body>' + encodedStr,
                'text/html');
            var decodedString = dom.body.textContent;
            
            //console.log(decodedString);
            return decodedString;
        }
        
    })
    
    // Directive for Lookup Search option
    .service('ApexQuery', function($q) {
                
        //Resolve Responses
        function resolveResponse(response, ev, def) {
            if(ev.status) {
                def.resolve(response);
            } else {
                def.reject(ev);
            }
        }        
        
        //Get lookup record from a specific object
        var getLookups = function(objectName, searchString, condition) {
            var def = $q.defer();
            if(!condition) { condition = ''; }
            if(!searchString) { searchString = ''; }
            Visualforce.remoting.Manager.invokeAction(
            '{!$RemoteAction.DLS_Staff_Time_Entry_Ctrl.getLookupRecords}',
                objectName,
                searchString,
                condition,
                function(response, ev) {
                    resolveResponse(response, ev, def);
                },
                {escape: true}
            );
            return def.promise;
        }
        
        return {
            getLookups: getLookups
        }
    })
        
     .directive('lookup',function($document, ApexQuery, $timeout){
            return {
                restrict: 'E',
                templateUrl:'lookup1.html',
                replace:true,
                scope: {
                  data: '=',
                  disabled: '=',
                  object: '=',
                  placeholder: '=',
                  condition: '=',
                  onChange: '=',
                  parameter: '=',
                  type: '='
                },
                controller:function($scope, $timeout){
                  
                    $scope.accounts = [];
                    $scope.searchTxt = '';
                    $scope.objectName = '';
                    $scope.isDropDownHidden = true;
                    $scope.showLoadingDiv = false;
                    
                    $scope.$watch('data',function(newVal,oldVal){
                        if($scope.data && $scope.data.Name){
                            $scope.searchTxt = $scope.data.Name;
                        }
                    },true);
                    
                    $scope.fetchAccounts = function(){
                        $scope.showLoadingDiv = true;
                        $scope.accounts = [];
                        $timeout(function(){
                            ApexQuery.getLookups($scope.object, $scope.searchTxt, $scope.condition).then(
                                function(data){
                                    $scope.accounts = data;
                                    $scope.showLoadingDiv = false;
                                },function(error){}
                            );
                        },400);
                    };
                    
                    $scope.updateDataModelAttr = function(selAcc){
                        $scope.data = selAcc;
                        $scope.searchTxt = selAcc.Name;
                        $scope.toggleDropDown();
                        console.log('inside project change', typeof $scope.change);
                        $timeout(function() {
                            if(typeof $scope.onChange == 'function') {
                                $scope.onChange($scope.parameter);
                            }
                        }, 0);
                    };
                    
                     // Added by Sukanya for close dropdown list
                    
                    $scope.closeDropdownList = function(event) {
                        if(!$scope.data) {
                           $scope.isDropDownHidden = true;
                        }
                        event.stopPropagation();
                    }
                    
                    
                    $scope.toggleDropDown = function(){
                        $scope.isDropDownHidden = !$scope.isDropDownHidden;
                        if($scope.isDropDownHidden){
                            $document.bind('click', function(event){
                                //var isClickedElementChildOfPopup = $('#lookuplist')
                                //  .find(event.target)
                                //  .length > 0;
                                var isClickedElementChildOfPopup = event.target;
                                if(isClickedElementChildOfPopup) {
                                    return;
                                }
                                $scope.isDropDownHidden = true;
                                $scope.$apply();
                                $document.unbind('click');
                            }); 
                        }
                        else{
                             $document.unbind('click');
                        }
                    };
                    
                    window.addEventListener('click', function(event) {
                        //console.log('window clicked.');
                        $scope.isDropDownHidden = true;
                        $scope.$apply();
                    });
                },
                link:function(scope,element,attr,ctrl) {
                    
                    
                }
            };
        })
    
    </script>
    <!-- Edited by Melbin -->
    <script>
        window.addEventListener('load', function() {
            var a = document.getElementsByClassName('_720kb-datepicker-calendar');
            for(var i = 0; i < a.length; i++){
                a[i].className = '_720kb-datepicker-calendar';
            }
        });
    </script>
</apex:component>